"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[997],{3351:(e,n,s)=>{s.r(n),s.d(n,{data:()=>l});const l={key:"v-1877923c",path:"/coding/Spring/Framework/WebServlet/4.WebSockets.html",title:"4. WebSockets",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"4.1. WebSocket 概论",slug:"_4-1-websocket-概论",children:[{level:3,title:"4.1.1. HTTP 对比 WebSocket",slug:"_4-1-1-http-对比-websocket",children:[]},{level:3,title:"4.1.2. 何时使用 WebSockets",slug:"_4-1-2-何时使用-websockets",children:[]}]},{level:2,title:"4.2. WebSocket API",slug:"_4-2-websocket-api",children:[{level:3,title:"4.2.1. WebSocketHandler",slug:"_4-2-1-websockethandler",children:[]},{level:3,title:"4.2.2. WebSocket 握手",slug:"_4-2-2-websocket-握手",children:[]},{level:3,title:"4.2.3. 部署",slug:"_4-2-3-部署",children:[]},{level:3,title:"4.2.4. 服务端配置",slug:"_4-2-4-服务端配置",children:[]},{level:3,title:"4.2.5. 允许的来源",slug:"_4-2-5-允许的来源",children:[]}]},{level:2,title:"4.3. SockJS 回退",slug:"_4-3-sockjs-回退",children:[{level:3,title:"4.3.1. 概览",slug:"_4-3-1-概览",children:[]},{level:3,title:"4.3.2. 使能 SockJS",slug:"_4-3-2-使能-sockjs",children:[]},{level:3,title:"4.3.3. IE 8 与 9",slug:"_4-3-3-ie-8-与-9",children:[]},{level:3,title:"4.3.4. 心跳",slug:"_4-3-4-心跳",children:[]},{level:3,title:"4.3.5. 客户端挂断",slug:"_4-3-5-客户端挂断",children:[]},{level:3,title:"4.3.6. SockJS 与 CORS",slug:"_4-3-6-sockjs-与-cors",children:[]},{level:3,title:"4.3.7. SockJsClient",slug:"_4-3-7-sockjsclient",children:[]}]},{level:2,title:"4.4. STOMP",slug:"_4-4-stomp",children:[{level:3,title:"4.4.1. 概览",slug:"_4-4-1-概览",children:[]},{level:3,title:"4.4.2. 优点",slug:"_4-4-2-优点",children:[]},{level:3,title:"4.4.3. 启用 STOMP",slug:"_4-4-3-启用-stomp",children:[]},{level:3,title:"4.4.4. WebSocket 服务端",slug:"_4-4-4-websocket-服务端",children:[]},{level:3,title:"4.4.5. 消息流",slug:"_4-4-5-消息流",children:[]},{level:3,title:"4.4.6. 带注解的控制器",slug:"_4-4-6-带注解的控制器",children:[]},{level:3,title:"4.4.7. 发送消息",slug:"_4-4-7-发送消息",children:[]},{level:3,title:"4.4.8. 简单代理",slug:"_4-4-8-简单代理",children:[]},{level:3,title:"4.4.9. 外部代理",slug:"_4-4-9-外部代理",children:[]},{level:3,title:"4.4.10. 连接到代理",slug:"_4-4-10-连接到代理",children:[]},{level:3,title:"4.4.11. 将点作为分隔符",slug:"_4-4-11-将点作为分隔符",children:[]},{level:3,title:"4.4.12. 身份验证",slug:"_4-4-12-身份验证",children:[]},{level:3,title:"4.4.13. 令牌（Token）验证",slug:"_4-4-13-令牌-token-验证",children:[]},{level:3,title:"4.4.14. 用户目的地",slug:"_4-4-14-用户目的地",children:[]},{level:3,title:"4.4.15. 消息顺序",slug:"_4-4-15-消息顺序",children:[]},{level:3,title:"4.4.16. 事件",slug:"_4-4-16-事件",children:[]},{level:3,title:"4.4.17. 拦截",slug:"_4-4-17-拦截",children:[]},{level:3,title:"4.4.18. STOMP 客户端",slug:"_4-4-18-stomp-客户端",children:[]},{level:3,title:"4.4.19. WebSocket 作用域",slug:"_4-4-19-websocket-作用域",children:[]},{level:3,title:"4.4.20. 性能",slug:"_4-4-20-性能",children:[]},{level:3,title:"4.4.21. 监控",slug:"_4-4-21-监控",children:[]},{level:3,title:"4.4.22. 测试",slug:"_4-4-22-测试",children:[]}]}],filePathRelative:"coding/Spring/Framework/WebServlet/4.WebSockets.md",git:{updatedTime:1630372804e3,contributors:[{name:"Yue_plus",email:"Yue_plus@foxmail.com",commits:1}]}}},2102:(e,n,s)=>{s.r(n),s.d(n,{default:()=>st});var l=s(6252),r=s(2484),a=s(9060);const c=(0,l._)("h1",{id:"_4-websockets",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-websockets","aria-hidden":"true"},"#"),(0,l.Uk)(" 4. WebSockets")],-1),i={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-websocket",target:"_blank",rel:"noopener noreferrer"},_=(0,l.Uk)("WebFlux"),o=(0,l._)("p",null,"此部分参考文档涵盖对 Servlet 堆栈的支持，包括原始 WebSocket 交互的 WebSocket 消息传递，通过 SockJS 进行 WebSocket 仿真以及通过 STOMP 作为 WebSocket 的子协议进行发布、订阅消息传递。",-1),t=(0,l._)("h2",{id:"_4-1-websocket-概论",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-1-websocket-概论","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.1. WebSocket 概论")],-1),b=(0,l.Uk)("WebSocket 协议 "),u={href:"https://tools.ietf.org/html/rfc6455",target:"_blank",rel:"noopener noreferrer"},p=(0,l.Uk)("RFC 6455"),m=(0,l.Uk)(" 提供了一种标准化方法，可通过单个 TCP 连接在客户端与服务端之间建立全双工双向通信通道。 它是与 HTTP 不同的 TCP 协议，但旨在通过端口 80 与 443 在 HTTP 上工作，并允许重复使用现有的防火墙规则。"),k=(0,l._)("p",null,[(0,l.Uk)("WebSocket 交互始于一个 HTTP 请求，该请求使用 HTTP "),(0,l._)("code",null,"Upgrade"),(0,l.Uk)(" 标头进行升级，或者在这种情况下切换到 WebSocket 协议。 以下示例展示了这种交互：")],-1),d=(0,l._)("div",{class:"language-YAML ext-YAML line-numbers-mode"},[(0,l._)("pre",{class:"language-YAML"},[(0,l._)("code",null,"GET /spring-websocket-portfolio/portfolio HTTP/1.1\nHost: localhost:8080\nUpgrade: websocket \nConnection: Upgrade \nSec-WebSocket-Key: Uc9l9TMkWGbHFD2qnFHltg==\nSec-WebSocket-Protocol: v10.stomp, v11.stomp\nSec-WebSocket-Version: 13\nOrigin: http://localhost:8080\n")]),(0,l._)("div",{class:"highlight-lines"},[(0,l._)("br"),(0,l._)("br"),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br")])],-1),g=(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("code",null,"Upgrade"),(0,l.Uk)(" 标头。")]),(0,l._)("li",null,[(0,l.Uk)("使用 "),(0,l._)("code",null,"Upgrade"),(0,l.Uk)(" 连接。")])],-1),h=(0,l._)("p",null,"具有 WebSocket 支持的服务端代替通常的 200 状态代码，返回类似于以下内容的输出：",-1),S=(0,l._)("div",{class:"language-YAML ext-YAML line-numbers-mode"},[(0,l._)("pre",{class:"language-YAML"},[(0,l._)("code",null,"HTTP/1.1 101 Switching Protocols \nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: 1qVdfYHU9hPOl4JYYNXF623Gzn0=\nSec-WebSocket-Protocol: v10.stomp\n")]),(0,l._)("div",{class:"highlight-lines"},[(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br")])],-1),U=(0,l._)("ol",null,[(0,l._)("li",null,"协议切换")],-1),w=(0,l._)("p",null,"握手成功后，HTTP 升级请求的基础 TCP 套接字将保持打开状态，客户端与服务端均可继续发送与接收消息。",-1),v=(0,l._)("p",null,"WebSockets 的工作原理的完整介绍超出了本文档的范围。 请参阅 RFC 6455，HTML5 的 WebSocket 章节，或 Web 上的许多简介和教程中的任何一个。",-1),f=(0,l._)("p",null,"请注意，如果 WebSocket 服务端在 Web 服务器（例如 nginx）后面运行，那么可能需要对其进行配置，以将 WebSocket 升级请求传递到 WebSocket 服务端。 同样，如果应用程序在云环境中运行，请检查与 WebSocket 支持相关的云提供商的说明。",-1),M=(0,l._)("h3",{id:"_4-1-1-http-对比-websocket",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-1-1-http-对比-websocket","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.1.1. HTTP 对比 WebSocket")],-1),T=(0,l._)("p",null,"尽管 WebSocket 被设计为与 HTTP 兼容并以 HTTP 请求开头，但重要的是要了解这两个协议导致了截然不同的体系结构与应用程序编程模型。",-1),W=(0,l._)("p",null,"在 HTTP 与 REST 中，应用程序被建模为许多 URL。 为了与应用程序交互，客户端访问那些 URL，即请求 - 响应风格。 服务端根据 HTTP URL、方法与标头将请求路由到适当的处理程序。",-1),C=(0,l._)("p",null,"相比之下，在 WebSockets 中，初始连接通常只有一个 URL。 随后，所有应用程序消息都在同一 TCP 连接上流动。 这指向了一个完全不同的异步、事件驱动的消息传递体系结构。",-1),x=(0,l._)("p",null,"WebSocket 也是一种低级传输协议，与 HTTP 不同，它不对消息的内容规定任何语义。 这意味着除非客户端与服务端就消息语义达成一致，否则就无法路由或处理消息。",-1),J=(0,l._)("p",null,[(0,l.Uk)("WebSocket 客户端与服务端可以通过 HTTP 握手请求上的 "),(0,l._)("code",null,"Sec-WebSocket-Protocol"),(0,l.Uk)(" 标头协商使用更高级别的消息协议（例如 STOMP）。 在这种情况下，它们需要提出自己的约定。")],-1),P=(0,l._)("h3",{id:"_4-1-2-何时使用-websockets",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-1-2-何时使用-websockets","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.1.2. 何时使用 WebSockets")],-1),H=(0,l._)("p",null,"WebSockets 可以使网页具有动态性与交互性。 但是，在许多情况下，结合使用 Ajax 与 HTTP 流或长时间轮询可以提供一种简单有效的解决方案。",-1),y=(0,l._)("p",null,"例如，新闻、邮件与社交订阅源需要动态更新，但是每几分钟进行一次更新可能是完全可以的。 另一方面，协作、游戏与金融应用程序需要更接近实时。",-1),E=(0,l._)("p",null,"仅延迟并不是决定因素。 如果消息量相对较少（例如，监视网络故障），那么 HTTP 流或轮询可以提供有效的解决方案。 低延迟，高频率与高音量的结合才是使用 WebSocket 的最佳案例。",-1),O=(0,l._)("p",null,[(0,l.Uk)("还请记住，在 Internet 上，不受控制的代理可能会阻止 WebSocket 交互，这可能是因为未将它们配置为传递 "),(0,l._)("code",null,"Upgrade"),(0,l.Uk)(" 标头，或者是因为它们关闭了长期处于空闲状态的连接。 这意味着与面向公众的应用程序相比，将 WebSocket 用于防火墙内部的应用程序是一个更直接的决定。")],-1),B=(0,l._)("h2",{id:"_4-2-websocket-api",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-2-websocket-api","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.2. WebSocket API")],-1),A={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-websocket-server-handler",target:"_blank",rel:"noopener noreferrer"},L=(0,l.Uk)("WebFlux"),R=(0,l._)("p",null,"Spring 框架提供了一个 WebSocket API，可用于编写处理 WebSocket 消息的客户端与服务端应用程序。",-1),I=(0,l._)("h3",{id:"_4-2-1-websockethandler",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-2-1-websockethandler","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.2.1. "),(0,l._)("code",null,"WebSocketHandler")],-1),j={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-websocket-server-handler",target:"_blank",rel:"noopener noreferrer"},X=(0,l.Uk)("WebFlux"),N=(0,l._)("p",null,[(0,l.Uk)("创建 WebSocket 服务端就像实现 "),(0,l._)("code",null,"WebSocketHandler"),(0,l.Uk)(" 一样简单，或者更可能地，扩展 "),(0,l._)("code",null,"TextWebSocketHandler"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"BinaryWebSocketHandler"),(0,l.Uk)("。 下面的示例使用 "),(0,l._)("code",null,"TextWebSocketHandler"),(0,l.Uk)("：")],-1),D=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"import org.springframework.web.socket.WebSocketHandler;\nimport org.springframework.web.socket.WebSocketSession;\nimport org.springframework.web.socket.TextMessage;\n\npublic class MyHandler extends TextWebSocketHandler {\n\n    @Override\n    public void handleTextMessage(WebSocketSession session, TextMessage message) {\n        // ...\n    }\n\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br")])],-1),F=(0,l._)("p",null,"有专用的 WebSocket Java 配置与 XML 命名空间支持，用于将前面的 WebSocket 处理程序映射到特定的 URL，如以下示例所示：",-1),q=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'import org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\n\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(myHandler(), "/myHandler");\n    }\n\n    @Bean\n    public WebSocketHandler myHandler() {\n        return new MyHandler();\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br")])],-1),G=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),V=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:handlers>\n        <websocket:mapping path="/myHandler" handler="myHandler"/>\n    </websocket:handlers>\n\n    <bean id="myHandler" class="org.springframework.samples.MyHandler"/>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br")])],-1),z=(0,l.Uk)("前面的示例用于 Spring MVC 应用程序，应该包含在 "),Y={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet",target:"_blank",rel:"noopener noreferrer"},Q=(0,l._)("code",null,"DispatcherServlet",-1),K=(0,l.Uk)(" 的配置中。 但是，Spring 的 WebSocket 支持不依赖于 Spring MVC。 在 "),Z={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.html",target:"_blank",rel:"noopener noreferrer"},$=(0,l._)("code",null,"WebSocketHttpRequestHandler",-1),ee=(0,l.Uk)(" 的帮助下将 "),ne=(0,l._)("code",null,"WebSocketHandler",-1),se=(0,l.Uk)(" 集成到其他 HTTP 服务环境中相对简单。"),le=(0,l._)("h3",{id:"_4-2-2-websocket-握手",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-2-2-websocket-握手","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.2.2. WebSocket 握手")],-1),re={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-websocket-server-handshake",target:"_blank",rel:"noopener noreferrer"},ae=(0,l.Uk)("WebFlux"),ce=(0,l._)("p",null,[(0,l.Uk)("定制初始 HTTP WebSocket 握手请求的最简单方法是通过 "),(0,l._)("code",null,"HandshakeInterceptor"),(0,l.Uk)("，它公开了“握手之前”与“握手之后”的方法。 可以使用此类拦截器来阻止握手或使任何属性对 "),(0,l._)("code",null,"WebSocketSession"),(0,l.Uk)(" 可用。 以下示例使用内置的拦截器将 HTTP 会话属性传递到 WebSocket 会话：")],-1),ie=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(new MyHandler(), "/myHandler")\n            .addInterceptors(new HttpSessionHandshakeInterceptor());\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br")])],-1),_e=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),oe=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:handlers>\n        <websocket:mapping path="/myHandler" handler="myHandler"/>\n        <websocket:handshake-interceptors>\n            <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>\n        </websocket:handshake-interceptors>\n    </websocket:handlers>\n\n    <bean id="myHandler" class="org.springframework.samples.MyHandler"/>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br")])],-1),te=(0,l._)("p",null,[(0,l.Uk)("一个更高级的选项是扩展 "),(0,l._)("code",null,"DefaultHandshakeHandler"),(0,l.Uk)("，它执行 WebSocket 握手的步骤，包括验证客户端来源、协商子协议以及其他详细信息。 如果应用程序需要配置自定义 "),(0,l._)("code",null,"RequestUpgradeStrategy"),(0,l.Uk)(" 以便适应尚不支持的 WebSocket 服务端引擎与版本，那么可能还需要使用此选项 （有关此主题的更多信息，请参阅 "),(0,l._)("a",{href:"#_4-2-3-%E9%83%A8%E7%BD%B2"},"部署"),(0,l.Uk)("）。 Java 配置与 XML 命名空间都使配置自定义 "),(0,l._)("code",null,"HandshakeHandler"),(0,l.Uk)(" 成为可能。")],-1),be=(0,l._)("div",{class:"custom-container warning"},[(0,l._)("p",{class:"custom-container-title"},"WARNING"),(0,l._)("p",null,[(0,l.Uk)("Spring 提供了一个 "),(0,l._)("code",null,"WebSocketHandlerDecorator"),(0,l.Uk)(" 基类，可用于装饰 "),(0,l._)("code",null,"WebSocketHandler"),(0,l.Uk)(" 并具有其他行为。 使用 WebSocket Java 配置或 XML 命名空间时，默认情况下会提供并添加日志记录与异常处理实现。 "),(0,l._)("code",null,"ExceptionWebSocketHandlerDecorator"),(0,l.Uk)(" 捕获由任何 "),(0,l._)("code",null,"WebSocketHandler"),(0,l.Uk)(" 方法引起的所有未捕获的异常，并关闭状态为 "),(0,l._)("code",null,"1011"),(0,l.Uk)("（指示服务端错误）的 WebSocket 会话。")])],-1),ue=(0,l._)("h3",{id:"_4-2-3-部署",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-2-3-部署","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.2.3. 部署")],-1),pe=(0,l._)("p",null,[(0,l.Uk)("Spring WebSocket API 易于集成到 Spring MVC 应用程序中，在该应用程序中，"),(0,l._)("code",null,"DispatcherServlet"),(0,l.Uk)(" 同时提供 HTTP WebSocket 握手与其他 HTTP 请求。 通过调用 "),(0,l._)("code",null,"WebSocketHttpRequestHandler"),(0,l.Uk)("，也很容易集成到其他 HTTP 处理方案中。 这是方便且易于理解的。 但是，对于 JSR-356 运行时，需要特别注意。")],-1),me=(0,l._)("p",null,[(0,l.Uk)("Java WebSocket API（JSR-356）提供了两种部署机制。 首先涉及启动时的 Servlet 容器类路径扫描（Servlet 3 特性）。 另一个是在 Servlet 容器初始化时使用的注册 API。 这两种机制均无法使用单个“前端控制器”进行所有 HTTP 处理（包括 WebSocket 握手与所有其他 HTTP 请求，例如：Spring MVC 的 "),(0,l._)("code",null,"DispatcherServlet"),(0,l.Uk)("）。")],-1),ke=(0,l._)("p",null,[(0,l.Uk)("这是 JSR-356 的一个重大限制，即使在 JSR-356 运行时中运行，Spring 的 WebSocket 支持也可以通过服务端特定的 "),(0,l._)("code",null,"RequestUpgradeStrategy"),(0,l.Uk)(" 实现解决。 Tomcat、Jetty、GlassFish、WebLogic、WebSphere 与 Undertow（与 WildFly）目前存在此类策略。")],-1),de={class:"custom-container tip"},ge=(0,l._)("p",{class:"custom-container-title"},"TIP",-1),he=(0,l.Uk)("已经创建了克服 Java WebSocket API 中的上述限制的请求，可以在 "),Se={href:"https://github.com/eclipse-ee4j/websocket-api/issues/211",target:"_blank",rel:"noopener noreferrer"},Ue=(0,l.Uk)("eclipse-ee4j/websocket-api#211"),we=(0,l.Uk)(" 中进行跟踪。 Tomcat、Undertow 与 WebSphere 提供了自己的 API 替代方案，使之可以做到这一点，而 Jetty 也可以实现。 我们希望更多的服务端可以做到这一点。"),ve=(0,l._)("p",null,[(0,l.Uk)("第二个考虑因素是，希望支持 JSR-356 的 Servlet 容器执行 "),(0,l._)("code",null,"ServletContainerInitializer"),(0,l.Uk)("（SCI）扫描，这可能会减慢应用程序的启动速度，在某些情况下会大大降低速度。 如果在升级到具有 JSR-356 支持的 Servlet 容器版本后观察到重大影响，那么应该可以通过使用 "),(0,l._)("code",null,"web.xml"),(0,l.Uk)(" 中的 "),(0,l._)("code",null,"<absolute-ordering />"),(0,l.Uk)(" 元素有选择地启用或禁用 Web 片段（和 SCI 扫描）,如以下示例所示：")],-1),fe=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<web-app xmlns="http://java.sun.com/xml/ns/javaee"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="\n        http://java.sun.com/xml/ns/javaee\n        https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"\n    version="3.0">\n\n    <absolute-ordering/>\n\n</web-app>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br")])],-1),Me=(0,l._)("p",null,[(0,l.Uk)("然后，可以按名称选择性地启用 Web 片段，例如 Spring 自己的 "),(0,l._)("code",null,"SpringServletContainerInitializer"),(0,l.Uk)("，它提供对 Servlet 3 Java 初始化 API 的支持。 以下示例展示了如何执行此操作：")],-1),Te=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<web-app xmlns="http://java.sun.com/xml/ns/javaee"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="\n        http://java.sun.com/xml/ns/javaee\n        https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"\n    version="3.0">\n\n    <absolute-ordering>\n        <name>spring_web</name>\n    </absolute-ordering>\n\n</web-app>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br")])],-1),We=(0,l._)("h3",{id:"_4-2-4-服务端配置",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-2-4-服务端配置","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.2.4. 服务端配置")],-1),Ce={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-websocket-server-config",target:"_blank",rel:"noopener noreferrer"},xe=(0,l.Uk)("WebFlux"),Je=(0,l._)("p",null,"每个基础的 WebSocket 引擎都公开配置属性，这些属性控制运行时特征，例如消息缓冲区大小的大小、空闲超时等。",-1),Pe=(0,l._)("p",null,[(0,l.Uk)("对于 Tomcat、WildFly 与 GlassFish，可以将 "),(0,l._)("code",null,"ServletServerContainerFactoryBean"),(0,l.Uk)(" 添加到 WebSocket Java 配置中，如以下示例所示：")],-1),He=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Bean\n    public ServletServerContainerFactoryBean createWebSocketContainer() {\n        ServletServerContainerFactoryBean container = new ServletServerContainerFactoryBean();\n        container.setMaxTextMessageBufferSize(8192);\n        container.setMaxBinaryMessageBufferSize(8192);\n        return container;\n    }\n\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br")])],-1),ye=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),Ee=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <bean class="org.springframework...ServletServerContainerFactoryBean">\n        <property name="maxTextMessageBufferSize" value="8192"/>\n        <property name="maxBinaryMessageBufferSize" value="8192"/>\n    </bean>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br")])],-1),Oe=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("对于客户端 WebSocket 配置，应使用 "),(0,l._)("code",null,"WebSocketContainerFactoryBean"),(0,l.Uk)("（XML）或 "),(0,l._)("code",null,"ContainerProvider.getWebSocketContainer()"),(0,l.Uk)("（Java 配置）。")])],-1),Be=(0,l._)("p",null,[(0,l.Uk)("对于 Jetty，需要提供一个预先配置的 Jetty "),(0,l._)("code",null,"WebSocketServerFactory"),(0,l.Uk)("，然后通过 WebSocket Java 配置将其注入 Spring 的 "),(0,l._)("code",null,"DefaultHandshakeHandler"),(0,l.Uk)(" 中。 以下示例展示了如何执行此操作：")],-1),Ae=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(echoWebSocketHandler(),\n            "/echo").setHandshakeHandler(handshakeHandler());\n    }\n\n    @Bean\n    public DefaultHandshakeHandler handshakeHandler() {\n\n        WebSocketPolicy policy = new WebSocketPolicy(WebSocketBehavior.SERVER);\n        policy.setInputBufferSize(8192);\n        policy.setIdleTimeout(600000);\n\n        return new DefaultHandshakeHandler(\n                new JettyRequestUpgradeStrategy(new WebSocketServerFactory(policy)));\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"21"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"22"),(0,l._)("br")])],-1),Le=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),Re=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:handlers>\n        <websocket:mapping path="/echo" handler="echoHandler"/>\n        <websocket:handshake-handler ref="handshakeHandler"/>\n    </websocket:handlers>\n\n    <bean id="handshakeHandler" class="org.springframework...DefaultHandshakeHandler">\n        <constructor-arg ref="upgradeStrategy"/>\n    </bean>\n\n    <bean id="upgradeStrategy" class="org.springframework...JettyRequestUpgradeStrategy">\n        <constructor-arg ref="serverFactory"/>\n    </bean>\n\n    <bean id="serverFactory" class="org.eclipse.jetty...WebSocketServerFactory">\n        <constructor-arg>\n            <bean class="org.eclipse.jetty...WebSocketPolicy">\n                <constructor-arg value="SERVER"/>\n                <property name="inputBufferSize" value="8092"/>\n                <property name="idleTimeout" value="600000"/>\n            </bean>\n        </constructor-arg>\n    </bean>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"21"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"22"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"23"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"24"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"25"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"26"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"27"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"28"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"29"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"30"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"31"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"32"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"33"),(0,l._)("br")])],-1),Ie=(0,l._)("h3",{id:"_4-2-5-允许的来源",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-2-5-允许的来源","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.2.5. 允许的来源")],-1),je={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-websocket-server-cors",target:"_blank",rel:"noopener noreferrer"},Xe=(0,l.Uk)("WebFlux"),Ne=(0,l.Uk)("从 Spring Framework 4.1.5 开始，WebSocket 与 SockJS 的默认行为是仅接受同源请求。 也可以允许所有或指定的来源列表。 此检查主要用于浏览器客户端。 没有任何措施可以阻止其他类型的客户端修改 "),De=(0,l._)("code",null,"Origin",-1),Fe=(0,l.Uk)(" 标头值（有关更多详细信息，请参阅 "),qe={href:"https://tools.ietf.org/html/rfc6454",target:"_blank",rel:"noopener noreferrer"},Ge=(0,l.Uk)("RFC 6454: Web 源概念"),Ve=(0,l.Uk)("）。"),ze=(0,l._)("p",null,"三种可能的行为是：",-1),Ye=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("仅允许相同来源的请求（默认）： 在此模式下，启用 SockJS 后，Iframe HTTP 响应标头 "),(0,l._)("code",null,"X-Frame-Options"),(0,l.Uk)(" 设置为 "),(0,l._)("code",null,"SAMEORIGIN"),(0,l.Uk)("，并且 JSONP 传输被禁用，因为它不允许检查请求的来源。 因此，启用此模式时，不支持 IE6 与 IE7。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("允许指定来源列表： 每个允许的来源必须以 "),(0,l._)("code",null,"http://"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"https://"),(0,l.Uk)(" 开头。 在此模式下，启用 SockJS 后，将禁用 IFrame 传输。 因此，启用此模式时，不支持 IE6 到 IE9。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("允许所有来源： 要启用此模式，应提供 "),(0,l._)("code",null,"*"),(0,l.Uk)(" 作为允许的来源值。 在这种模式下，所有传输都可用。")])])],-1),Qe=(0,l._)("p",null,"可以配置 WebSocket 与 SockJS 允许的来源，如以下示例所示：",-1),Ke=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'import org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\n\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(myHandler(), "/myHandler").setAllowedOrigins("https://mydomain.com");\n    }\n\n    @Bean\n    public WebSocketHandler myHandler() {\n        return new MyHandler();\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br")])],-1),Ze=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),$e=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:handlers allowed-origins="https://mydomain.com">\n        <websocket:mapping path="/myHandler" handler="myHandler" />\n    </websocket:handlers>\n\n    <bean id="myHandler" class="org.springframework.samples.MyHandler"/>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br")])],-1),en=(0,l._)("h2",{id:"_4-3-sockjs-回退",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-sockjs-回退","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3. SockJS 回退")],-1),nn=(0,l._)("p",null,[(0,l.Uk)("在公共互联网上，控件外部的限制性代理可能会阻止 WebSocket 交互，这可能是因为未将它们配置为传递 "),(0,l._)("code",null,"Upgrade"),(0,l.Uk)(" 标头，或者是因为它们关闭了长期处于空闲状态的连接。")],-1),sn=(0,l._)("p",null,"解决此问题的方法是 WebSocket 模拟，即先尝试使用 WebSocket，然后再尝试使用基于 HTTP 的技术来模拟 WebSocket 交互并公开相同的应用程序级 API。",-1),ln=(0,l._)("p",null,"在 Servlet 技术栈上，Spring 框架为 SockJS 协议提供服务端与客户端支持。",-1),rn=(0,l._)("h3",{id:"_4-3-1-概览",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-1-概览","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.1. 概览")],-1),an=(0,l._)("p",null,"SockJS 的目标是让应用程序使用 WebSocket API，但在运行时的必要时刻回退到非 WebSocket 替代方案，而无需更改应用程序代码。",-1),cn=(0,l._)("p",null,"SockJS 包含：",-1),_n={href:"https://github.com/sockjs/sockjs-protocol",target:"_blank",rel:"noopener noreferrer"},on=(0,l.Uk)("SockJS 协议"),tn=(0,l.Uk)("以可执行 "),bn={href:"https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html",target:"_blank",rel:"noopener noreferrer"},un=(0,l.Uk)("叙述性测试"),pn=(0,l.Uk)(" 的形式定义。"),mn={href:"https://github.com/sockjs/sockjs-client/",target:"_blank",rel:"noopener noreferrer"},kn=(0,l.Uk)("SockJS JavaScript 客户端"),dn=(0,l.Uk)("——一种在浏览器中使用的客户端库。"),gn=(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("SockJS 服务端实现，包含一个 Spring 框架的 "),(0,l._)("code",null,"spring-websocket"),(0,l.Uk)(" 模块。")])],-1),hn=(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"spring-websocket"),(0,l.Uk)(" 模块中的 SockJS Java 客户端（从 4.1 版开始）。")])],-1),Sn=(0,l.Uk)("SockJS 设计用于浏览器。 它使用多种技术来支持各种浏览器版本。 有关 SockJS 传输类型与浏览器的完整列表，请参见 "),Un={href:"https://github.com/sockjs/sockjs-client/",target:"_blank",rel:"noopener noreferrer"},wn=(0,l.Uk)("SockJS 客户端"),vn=(0,l.Uk)("页面。 传输分为三大类：WebSocket、HTTP 流与 HTTP 长轮询。 有关这些类别的概述，请参阅"),fn={href:"https://spring.io/blog/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/",target:"_blank",rel:"noopener noreferrer"},Mn=(0,l.Uk)("此博客文章"),Tn=(0,l.Uk)("。"),Wn=(0,l._)("p",null,[(0,l.Uk)("SockJS 客户端首先发送 "),(0,l._)("code",null,"GET/info"),(0,l.Uk)(" 以从服务端获取基本信息。 在那之后，它必须决定使用哪种传输方式。 如果可能，将使用 WebSocket。 如果没有，在大多数浏览器中，至少有一个 HTTP 流选项。 如果不是，则使用 HTTP（长）轮询。")],-1),Cn=(0,l._)("p",null,"所有传输请求都具有以下 URL 结构：",-1),xn=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"language-text"},[(0,l._)("code",null,"https://host:port/myApp/myEndpoint/{server-id}/{session-id}/{transport}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br")])],-1),Jn=(0,l._)("p",null,"此处：",-1),Pn=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"{server-id}"),(0,l.Uk)(" 用于在集群中路由请求，但在其他情况下不使用。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"{session-id}"),(0,l.Uk)(" 用于关联属于 SockJS 会话的 HTTP 请求。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"{transport}"),(0,l.Uk)(" 用于指示传输类型（例如：websocket、xhr-streaming、等）。")])])],-1),Hn=(0,l._)("p",null,"WebSocket 传输仅需要单个 HTTP 请求即可进行 WebSocket 握手。 此后所有消息在该套接字上交换。",-1),yn=(0,l._)("p",null,"HTTP 传输需要更多请求。 例如，Ajax/XHR 流依赖于对服务端到客户端消息的一个长时间运行的请求，以及对客户端到服务端消息的其他 HTTP POST 请求。 长轮询与此类似，不同之处在于长轮询在每次服务端到客户端发送后结束当前请求。",-1),En=(0,l._)("p",null,[(0,l.Uk)("SockJS 增加了最小消息帧。 例如，服务端最初发送字母 "),(0,l._)("code",null,"o"),(0,l.Uk)("（“开启”帧），消息以 "),(0,l._)("code",null,'a["message1","message2"]'),(0,l.Uk)("（JSON 编码数组）发送，如果 25 秒内（默认）没有消息，那么发送字母 "),(0,l._)("code",null,"h"),(0,l.Uk)("（“心跳”帧），最后使用字母 "),(0,l._)("code",null,"c"),(0,l.Uk)("（“关闭”帧）关闭会话。")],-1),On=(0,l.Uk)("要了解更多信息，请在浏览器中运行示例并查看 HTTP 请求。 SockJS 客户端允许修复传输列表，因此可以一次查看每个传输。 SockJS 客户端还提供了调试标志，该标志可在浏览器控制台中支持有用的消息。 在服务端，可以为 "),Bn=(0,l._)("code",null,"org.springframework.web.socket",-1),An=(0,l.Uk)(" 启用 "),Ln=(0,l._)("code",null,"TRACE",-1),Rn=(0,l.Uk)(" 日志记录。 有关更多详细信息，请参见 SockJS 协议"),In={href:"https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html",target:"_blank",rel:"noopener noreferrer"},jn=(0,l.Uk)("叙述测试"),Xn=(0,l.Uk)("。"),Nn=(0,l._)("h3",{id:"_4-3-2-使能-sockjs",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-2-使能-sockjs","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.2. 使能 SockJS")],-1),Dn=(0,l._)("p",null,"可以通过 Java 配置启用 SockJS，如以下示例所示：",-1),Fn=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(myHandler(), "/myHandler").withSockJS();\n    }\n\n    @Bean\n    public WebSocketHandler myHandler() {\n        return new MyHandler();\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br")])],-1),qn=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),Gn=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:handlers>\n        <websocket:mapping path="/myHandler" handler="myHandler"/>\n        <websocket:sockjs/>\n    </websocket:handlers>\n\n    <bean id="myHandler" class="org.springframework.samples.MyHandler"/>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br")])],-1),Vn=(0,l.Uk)("前面的示例用于 Spring MVC 应用程序，应该包含在 "),zn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet",target:"_blank",rel:"noopener noreferrer"},Yn=(0,l._)("code",null,"DispatcherServlet",-1),Qn=(0,l.Uk)(" 的配置中。 但是，Spring 的 WebSocket 支持不依赖于 Spring MVC。 在 "),Kn={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.html",target:"_blank",rel:"noopener noreferrer"},Zn=(0,l._)("code",null,"WebSocketHttpRequestHandler",-1),$n=(0,l.Uk)(" 的帮助下将 "),es=(0,l._)("code",null,"WebSocketHandler",-1),ns=(0,l.Uk)(" 集成到其他 HTTP 服务环境中相对简单。"),ss=(0,l.Uk)("在浏览器端，应用程序可以使用 "),ls={href:"https://github.com/sockjs/sockjs-client/",target:"_blank",rel:"noopener noreferrer"},rs=(0,l._)("code",null,"sockjs-client",-1),as=(0,l.Uk)("（版本 1.0.x）。 它模拟 W3C WebSocket API，并与服务端通信以选择最佳的传输选项，具体取决于运行它的浏览器。 请参阅 "),cs={href:"https://github.com/sockjs/sockjs-client/",target:"_blank",rel:"noopener noreferrer"},is=(0,l.Uk)("sockjs-client"),_s=(0,l.Uk)(" 页面与浏览器支持的传输类型列表。 客户端还提供了几个配置选项，例如用于指定要包含的传输。"),os=(0,l._)("h3",{id:"_4-3-3-ie-8-与-9",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-3-ie-8-与-9","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.3. IE 8 与 9")],-1),ts=(0,l._)("p",null,"Internet Explorer 8 与 9 仍在使用。 它们是拥有 SockJS 的关键原因。 本节涵盖有关在这些浏览器中运行的重要注意事项。",-1),bs=(0,l.Uk)("SockJS 客户端通过使用 Microsoft 的 "),us={href:"https://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx",target:"_blank",rel:"noopener noreferrer"},ps=(0,l._)("code",null,"XDomainRequest",-1),ms=(0,l.Uk)(" 在 IE 8 与 9 中支持 Ajax/XHR 流。 跨域有效，但不支持发送 Cookie。 Cookies 对于 Java 应用程序通常是必不可少的。 但是，由于 SockJS 客户端可用于多种服务端类型（而不仅仅是 Java 类型），因此它需要知道 cookie 是否重要。 如果是这样，那么 SockJS 客户端更倾向 Ajax/XHR 进行流传输。 否则，它依赖于基于 iframe 的技术。"),ks=(0,l._)("p",null,[(0,l.Uk)("SockJS 客户端的第一个 "),(0,l._)("code",null,"/info"),(0,l.Uk)(" 请求是对详细信息的请求，这些信息可以影响客户端对传输方式的选择。 这些详细信息之一是服务端应用程序是否依赖 Cookie（例如，出于身份验证目的或使用粘性会话进行群集）。 Spring 对 SockJS 的支持包括一个名为 "),(0,l._)("code",null,"sessionCookieNeeded"),(0,l.Uk)(" 的属性。 由于大多数 Java 应用程序都依赖 "),(0,l._)("code",null,"JSESSIONID"),(0,l.Uk)(" cookie，因此默认情况下启用该功能。 如果应用程序不需要它，那么可以关闭此选项，然后 SockJS 客户端应在 IE 8 与 9 中选择 "),(0,l._)("code",null,"xdr-streaming"),(0,l.Uk)("。")],-1),ds=(0,l.Uk)("如果确实使用基于 iframe 的传输，请记住，可以通过将 HTTP 响应标头 "),gs=(0,l._)("code",null,"X-Frame-Options",-1),hs=(0,l.Uk)(" 设置为 "),Ss=(0,l._)("code",null,"DENY",-1),Us=(0,l.Uk)("、"),ws=(0,l._)("code",null,"SAMEORIGIN",-1),vs=(0,l.Uk)(" 或 "),fs=(0,l._)("code",null,"ALLOW-FROM <origin>",-1),Ms=(0,l.Uk)(" 来指示浏览器阻止在给定页面上使用 iframe。 这用于防止"),Ts={href:"https://www.owasp.org/index.php/Clickjacking",target:"_blank",rel:"noopener noreferrer"},Ws=(0,l.Uk)("点击劫持"),Cs=(0,l.Uk)("。"),xs={class:"custom-container tip"},Js=(0,l._)("p",{class:"custom-container-title"},"TIP",-1),Ps=(0,l._)("p",null,[(0,l.Uk)("Spring Security 3.2+ 提供了对每个响应设置 "),(0,l._)("code",null,"X-Frame-Options"),(0,l.Uk)(" 的支持。 默认情况下，Spring Security Java 配置将其设置为 "),(0,l._)("code",null,"DENY"),(0,l.Uk)("。 在 3.2 中，Spring Security XML 命名空间默认情况下不设置该标头，但可以配置为这样做。 将来，它可能会成为默认设置。")],-1),Hs=(0,l.Uk)("有关如何配置 "),ys=(0,l._)("code",null,"X-Frame-Options",-1),Es=(0,l.Uk)(" 标头设置的详细信息，请参见 Spring Security 文档的"),Os={href:"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers",target:"_blank",rel:"noopener noreferrer"},Bs=(0,l.Uk)("默认安全标头"),As=(0,l.Uk)("。 也可以查看 "),Ls={href:"https://jira.spring.io/browse/SEC-2501",target:"_blank",rel:"noopener noreferrer"},Rs=(0,l.Uk)("SEC-2501"),Is=(0,l.Uk)(" 以获取更多背景信息。"),js=(0,l._)("p",null,[(0,l.Uk)("如果应用程序添加了 "),(0,l._)("code",null,"X-Frame-Options"),(0,l.Uk)(" 响应标头（应该如此！）并依赖于基于 iframe 的传输，那么需要将标头值设置为 "),(0,l._)("code",null,"SAMEORIGIN"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"ALLOW-FROM <origin>"),(0,l.Uk)("。 Spring SockJS 支持还需要知道 SockJS 客户端的位置，因为它是从 iframe 加载的。 默认情况下，iframe 设置为从 CDN 位置下载 SockJS 客户端。 最好将此选项配置为使用与应用程序源相同的 URL。")],-1),Xs=(0,l._)("p",null,"以下示例展示了如何在 Java 配置中执行此操作：",-1),Ns=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/portfolio").withSockJS()\n                .setClientLibraryUrl("http://localhost:8080/myapp/js/sockjs-client.js");\n    }\n\n    // ...\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br")])],-1),Ds=(0,l._)("p",null,[(0,l.Uk)("XML 命名空间通过 "),(0,l._)("code",null,"<websocket:sockjs>"),(0,l.Uk)(" 元素提供了类似的选项。")],-1),Fs={class:"custom-container tip"},qs=(0,l._)("p",{class:"custom-container-title"},"TIP",-1),Gs=(0,l.Uk)("在初始开发过程中，请启用 SockJS 客户端开发模式，以防止浏览器缓存本应缓存的 SockJS 请求（如 iframe）。 有关如何启用它的详细信息，请参见 "),Vs={href:"https://github.com/sockjs/sockjs-client/",target:"_blank",rel:"noopener noreferrer"},zs=(0,l.Uk)("SockJS 客户端"),Ys=(0,l.Uk)(" 页面。"),Qs=(0,l._)("h3",{id:"_4-3-4-心跳",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-4-心跳","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.4. 心跳")],-1),Ks=(0,l.Uk)("SockJS 协议要求服务端发送心跳消息，以防止代理断定连接挂起。 Spring SockJS 配置具有一个名为 "),Zs=(0,l._)("code",null,"heartbeatTime",-1),$s=(0,l.Uk)(" 的属性，可用于自定义频率。 默认情况下，假设没有其他消息在该连接上发送，那么心跳将在 25 秒后发送。 这个 25 秒的值符合以下对公共互联网应用程序的 "),el={href:"https://tools.ietf.org/html/rfc6202",target:"_blank",rel:"noopener noreferrer"},nl=(0,l.Uk)("IETF 建议"),sl=(0,l.Uk)("。"),ll=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,"在 WebSocket 与 SockJS 上使用 STOMP 时，如果 STOMP 客户端与服务端协商要交换的心跳，将会禁用 SockJS 心跳。")],-1),rl=(0,l._)("p",null,[(0,l.Uk)("Spring SockJS 支持还允许配置 "),(0,l._)("code",null,"TaskScheduler"),(0,l.Uk)(" 来计划心跳任务。 任务调度程序由线程池支持，其默认设置基于可用处理器的数量。 应该考虑根据特定需求自定义设置。")],-1),al=(0,l._)("h3",{id:"_4-3-5-客户端挂断",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-5-客户端挂断","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.5. 客户端挂断")],-1),cl=(0,l.Uk)("HTTP 流与 HTTP 长轮询 SockJS 传输要求连接保持打开的时间比平常更长。 有关这些技术的概述，请参见"),il={href:"https://spring.io/blog/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/",target:"_blank",rel:"noopener noreferrer"},_l=(0,l.Uk)("此博客文章"),ol=(0,l.Uk)("。"),tl=(0,l._)("p",null,"在 Servlet 容器中，这是通过 Servlet 3 异步支持完成的，该支持允许退出 Servlet 容器线程，处理请求并继续写入另一个线程的响应。",-1),bl=(0,l.Uk)("一个特定的问题是，Servlet API 不会为已离开的客户端提供通知。 请参阅 "),ul={href:"https://github.com/eclipse-ee4j/servlet-api/issues/44",target:"_blank",rel:"noopener noreferrer"},pl=(0,l.Uk)("eclipse-ee4j/servlet-api#44"),ml=(0,l.Uk)("。 但是，Servlet 容器在随后尝试写入响应时会引发异常。 由于 Spring 的 SockJS 服务支持服务端发送的心跳信号（默认情况下，每 25 秒发送一次），这意味着通常会在该时间段内（如果消息发送频率更高将更早）检测到客户端断开连接。"),kl=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("结果，由于客户端已断开连接，可能会发生网络 I/O 故障，这可能会在日志中填充不必要的堆栈跟踪。 Spring 会尽最大努力找出代表客户端断开连接（特定于每个服务器）的网络故障，并通过使用专用日志类别 "),(0,l._)("code",null,"DISCONNECTED_CLIENT_LOG_CATEGORY"),(0,l.Uk)("（在 "),(0,l._)("code",null,"AbstractSockJsSession"),(0,l.Uk)(" 中定义）来记录一条最小的消息。 如果需要查看堆栈跟踪，可以将该日志类别设置为 "),(0,l._)("code",null,"TRACE"),(0,l.Uk)("。")])],-1),dl=(0,l._)("h3",{id:"_4-3-6-sockjs-与-cors",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-6-sockjs-与-cors","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.6. SockJS 与 CORS")],-1),gl=(0,l._)("p",null,[(0,l.Uk)("如果允许跨域请求（请参阅“"),(0,l._)("a",{href:"#_4-2-5-%E5%85%81%E8%AE%B8%E7%9A%84%E6%9D%A5%E6%BA%90"},"允许的来源"),(0,l.Uk)("”），那么 SockJS 协议使用 CORS 在 XHR 流与轮询传输中提供跨域支持。 因此，除非在响应中检测到 CORS 标头的存在，否则将自动添加 CORS 标头。 因此，如果已经将应用程序配置为提供 CORS 支持（例如，通过 Servlet 过滤器），那么 Spring 的 "),(0,l._)("code",null,"SockJsService"),(0,l.Uk)(" 会跳过这一部分。")],-1),hl=(0,l._)("p",null,[(0,l.Uk)("也可以通过在 Spring 的 SockJsService 中设置 "),(0,l._)("code",null,"suppressCors"),(0,l.Uk)(" 属性来禁止添加这些 CORS 标头。")],-1),Sl=(0,l._)("p",null,"SockJS 需要以下标头与值：",-1),Ul=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"Access-Control-Allow-Origin"),(0,l.Uk)("：从 "),(0,l._)("code",null,"Origin"),(0,l.Uk)(" 请求标头的值初始化。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"Access-Control-Allow-Credentials"),(0,l.Uk)("：始终设置为 "),(0,l._)("code",null,"true"),(0,l.Uk)("。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"Access-Control-Request-Headers"),(0,l.Uk)("：从等效请求标头中的值初始化。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"Access-Control-Allow-Methods"),(0,l.Uk)("：传输支持的 HTTP 方法（请参见 "),(0,l._)("code",null,"TransportType"),(0,l.Uk)(" 枚举）。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"Access-Control-Max-Age"),(0,l.Uk)("：设置为 31536000（1 年）。")])])],-1),wl=(0,l._)("p",null,[(0,l.Uk)("有关确切的实现，请参见 "),(0,l._)("code",null,"AbstractSockJsService"),(0,l.Uk)(" 中的 "),(0,l._)("code",null,"addCorsHeaders"),(0,l.Uk)(" 与源代码中的 "),(0,l._)("code",null,"TransportType"),(0,l.Uk)(" 枚举。")],-1),vl=(0,l._)("p",null,[(0,l.Uk)("另外，如果 CORS 配置允许，请考虑排除带有 SockJS 端点前缀的 URL，从而让 Spring 的 "),(0,l._)("code",null,"SockJsService"),(0,l.Uk)(" 处理它。")],-1),fl=(0,l._)("h3",{id:"_4-3-7-sockjsclient",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-3-7-sockjsclient","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.3.7. "),(0,l._)("code",null,"SockJsClient")],-1),Ml=(0,l._)("p",null,"Spring 提供了一个 SockJS Java 客户端，无需使用浏览器即可连接到远程 SockJS 端点。 当需要通过公共网络在两个服务器之间进行双向通信时（这是网络代理可以阻止使用 WebSocket 协议的地方），这特别有用。 SockJS Java 客户端对于测试目的（例如，模拟大量并发用户）也非常有用。",-1),Tl=(0,l._)("p",null,[(0,l.Uk)("SockJS Java 客户端支持 "),(0,l._)("code",null,"websocket"),(0,l.Uk)("、"),(0,l._)("code",null,"xhr-streaming"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"xhr-polling"),(0,l.Uk)(" 传输。 其余的仅在浏览器中有意义。")],-1),Wl=(0,l._)("p",null,[(0,l.Uk)("可以使用以下命令配置 "),(0,l._)("code",null,"WebSocketTransport"),(0,l.Uk)("：")],-1),Cl=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("JSR-356 运行时的 "),(0,l._)("code",null,"StandardWebSocketClient")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("通过使用 Jetty 9+ 本机 WebSocket API 来创建 "),(0,l._)("code",null,"JettyWebSocketClient"),(0,l.Uk)("。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("Spring 的 "),(0,l._)("code",null,"WebSocketClient"),(0,l.Uk)(" 的任何实现。")])])],-1),xl=(0,l._)("p",null,[(0,l.Uk)("根据定义，"),(0,l._)("code",null,"XhrTransport"),(0,l.Uk)(" 支持 "),(0,l._)("code",null,"xhr-streaming"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"xhr-polling"),(0,l.Uk)("，因为从客户端的角度来看，除了用于连接服务器的 URL 之外没有其他区别。 当前有两种实现：")],-1),Jl=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"RestTemplateXhrTransport"),(0,l.Uk)(" 使用 Spring 的 "),(0,l._)("code",null,"RestTemplate"),(0,l.Uk)(" 进行 HTTP 请求。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"JettyXhrTransport"),(0,l.Uk)(" 使用 Jetty 的 "),(0,l._)("code",null,"HttpClient"),(0,l.Uk)(" 进行 HTTP 请求。")])])],-1),Pl=(0,l._)("p",null,"以下示例展示了如何创建 SockJS 客户端并连接到 SockJS 端点：",-1),Hl=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'List<Transport> transports = new ArrayList<>(2);\ntransports.add(new WebSocketTransport(new StandardWebSocketClient()));\ntransports.add(new RestTemplateXhrTransport());\n\nSockJsClient sockJsClient = new SockJsClient(transports);\nsockJsClient.doHandshake(new MyWebSocketHandler(), "ws://example.com:8080/sockjs");\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br")])],-1),yl=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("SockJS 对消息使用 JSON 格式的数组。 默认情况下，使用 Jackson 2，并且需要在类路径上。 或者，可以配置 "),(0,l._)("code",null,"SockJsMessageCodec"),(0,l.Uk)(" 的自定义实现，并在 "),(0,l._)("code",null,"SockJsClient"),(0,l.Uk)(" 上对其进行配置。")])],-1),El=(0,l._)("p",null,[(0,l.Uk)("要使用 "),(0,l._)("code",null,"SockJsClient"),(0,l.Uk)(" 模拟大量并发用户，需要配置基础 HTTP 客户端（用于 XHR 传输）以允许足够数量的连接与线程。 以下示例展示了如何使用 Jetty 进行操作：")],-1),Ol=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"HttpClient jettyHttpClient = new HttpClient();\njettyHttpClient.setMaxConnectionsPerDestination(1000);\njettyHttpClient.setExecutor(new QueuedThreadPool(1000));\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br")])],-1),Bl=(0,l._)("p",null,"下面的示例展示了与服务端 SockJS 相关的属性（有关详细信息，请参见 javadoc），还应该考虑自定义：",-1),Al=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\npublic class WebSocketConfig extends WebSocketMessageBrokerConfigurationSupport {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/sockjs").withSockJS()\n            .setStreamBytesLimit(512 * 1024) \n            .setHttpMessageCacheSize(1000) \n            .setDisconnectDelay(30 * 1000); \n    }\n\n    // ...\n}\n')]),(0,l._)("div",{class:"highlight-lines"},[(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br")])],-1),Ll=(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("将 "),(0,l._)("code",null,"streamBytesLimit"),(0,l.Uk)(" 属性设置为 512KB（默认值为 128KB——"),(0,l._)("code",null,"128 * 1024"),(0,l.Uk)("）。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("将 "),(0,l._)("code",null,"httpMessageCacheSize"),(0,l.Uk)(" 属性设置为 1,000（默认值为 "),(0,l._)("code",null,"100"),(0,l.Uk)("）。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("将断开连接延迟属性设置为 30 个属性秒（默认值为 5 秒——"),(0,l._)("code",null,"5 * 1000"),(0,l.Uk)("）。")])])],-1),Rl=(0,l._)("h2",{id:"_4-4-stomp",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-stomp","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4. STOMP")],-1),Il=(0,l._)("p",null,"WebSocket 协议定义了两种消息类型（文本消息与二进制消息），但是其内容未定义。 该协议定义了一种机制，供客户端与服务端协商用于在 WebSocket 之上使用的子协议（即高级消息协议），以定义每条消息可以发送的类型、格式是什么、每条消息的内容，等等。 子协议的使用是可选的，但是无论哪种方式，客户端和服务端都需要就定义消息内容的某种协议达成共识。",-1),jl=(0,l._)("h3",{id:"_4-4-1-概览",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-1-概览","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.1. 概览")],-1),Xl={href:"https://stomp.yueplus.ink/stomp-specification-1.2.html#Abstract",target:"_blank",rel:"noopener noreferrer"},Nl=(0,l.Uk)("STOMP"),Dl=(0,l.Uk)("（面向简单文本的消息传递协议）最初是为脚本语言（例如：Ruby、Python 与 Perl）创建的，以连接到企业消息代理。 它旨在解决常用消息传递模式的最小子集。 STOMP 可以在任何可靠的双向流网络协议上使用，例如 TCP 与 WebSocket。 尽管 STOMP 是面向文本的协议，但是消息有效负载可以是文本或二进制。"),Fl=(0,l._)("p",null,"STOMP 是基于帧的协议，其帧是基于 HTTP 的。 以下清单显示了 STOMP 帧的结构：",-1),ql=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"language-text"},[(0,l._)("code",null,"COMMAND\nheader1:value1\nheader2:value2\n\nBody^@\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br")])],-1),Gl=(0,l._)("p",null,[(0,l.Uk)("客户端可以使用 "),(0,l._)("code",null,"SEND"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"SUBSCRIBE"),(0,l.Uk)(" 命令发送或订阅消息，以及描述消息的内容与接收者的 "),(0,l._)("code",null,"destination "),(0,l.Uk)(" 标头。 这启用了一种简单的发布 - 订阅机制，可以使用该机制通过代理将消息发送到其他连接的客户端，或者将消息发送到服务端以请求执行某些工作。")],-1),Vl=(0,l._)("p",null,[(0,l.Uk)("使用 Spring 的 STOMP 支持时，Spring WebSocket 应用程序将充当客户端的 STOMP 代理。 消息被路由到 "),(0,l._)("code",null,"@Controller"),(0,l.Uk)(" 消息处理方法或简单的内存中代理，该代理跟踪订阅并向订阅的用户广播消息。 还可以将 Spring 配置为与专用的 STOMP 代理（例如：RabbitMQ、ActiveMQ 与其他代理）一起使用，以实际广播消息。 在那种情况下，Spring 维护与代理的 TCP 连接，将消息中继给它，并将消息从它传递到连接的 WebSocket 客户端。 因此，Spring Web 应用程序可以依靠基于 HTTP 的统一安全性，通用验证以及用于消息处理的熟悉的编程模型。")],-1),zl=(0,l._)("p",null,[(0,l.Uk)("以下示例展示了一个客户订阅的股票报价，服务端可能会定期发出该股票报价（例如：通过计划的任务，该任务通过 "),(0,l._)("code",null,"SimpMessagingTemplate"),(0,l.Uk)(" 将消息发送给代理）：")],-1),Yl=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"language-text"},[(0,l._)("code",null,"SUBSCRIBE\nid:sub-1\ndestination:/topic/price.stock.*\n\n^@\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br")])],-1),Ql=(0,l._)("p",null,[(0,l.Uk)("以下示例展示了一个发送交易请求的客户端，服务端可以通过 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法处理该请求：")],-1),Kl=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"language-text"},[(0,l._)("code",null,'SEND\ndestination:/queue/trade\ncontent-type:application/json\ncontent-length:44\n\n{"action":"BUY","ticker":"MMM","shares",44}^@\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br")])],-1),Zl=(0,l._)("p",null,"执行后，服务端可以向客户广播交易确认消息与详细信息。",-1),$l=(0,l._)("p",null,[(0,l.Uk)("在 STOMP 规范中，目的地的含义是故意不透明的。 它可以是任何字符串，并且完全由 STOMP 服务端定义它们支持的目的地的语义和语法。 但是，目的地通常是类似路径的字符串，其中 "),(0,l._)("code",null,"/topic/.."),(0,l.Uk)(" 表示发布 - 订阅（一对多），而 "),(0,l._)("code",null,"/queue/"),(0,l.Uk)(" 表示点对点（一对一）消息交流。")],-1),er=(0,l._)("p",null,[(0,l.Uk)("STOMP 服务端可以使用 "),(0,l._)("code",null,"MESSAGE"),(0,l.Uk)(" 命令向所有订阅者广播消息。 以下示例展示了服务端向订阅的客户端发送股票报价：")],-1),nr=(0,l._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,l._)("pre",{class:"language-text"},[(0,l._)("code",null,'MESSAGE\nmessage-id:nxahklf6-1\nsubscription:sub-1\ndestination:/topic/price.stock.MMM\n\n{"ticker":"MMM","price":129.45}^@\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br")])],-1),sr=(0,l._)("p",null,[(0,l.Uk)("服务端无法发送未经请求的消息。 来自服务端的所有消息都必须响应特定的客户端订阅，并且服务端消息的 "),(0,l._)("code",null,"subscription-id"),(0,l.Uk)(" 标头必须与客户端订阅的 "),(0,l._)("code",null,"id"),(0,l.Uk)(" 标头匹配。")],-1),lr=(0,l.Uk)("前面的概述旨在提供对 STOMP 协议的最基本的了解。 建议全面阅读协议 "),rr={href:"https://stomp.yueplus.ink/stomp-specification-1.2.html",target:"_blank",rel:"noopener noreferrer"},ar=(0,l.Uk)("规范"),cr=(0,l.Uk)("。"),ir=(0,l._)("h3",{id:"_4-4-2-优点",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-2-优点","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.2. 优点")],-1),_r=(0,l._)("p",null,"与使用原始 WebSocket 相比，使用 STOMP 作为子协议使 Spring Framework 与 Spring Security 提供了更丰富的编程模型。 关于 HTTP 与原始 TCP 以及它如何让 Spring MVC 与其他 Web 框架提供丰富的功能，可以得出相同的观点。 以下是优点列表：",-1),or=(0,l._)("li",null,[(0,l._)("p",null,"无需发明自定义消息协议与消息格式。")],-1),tr=(0,l.Uk)("可以使用 STOMP 客户端，包括 Spring Framework 中的 "),br={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-client",target:"_blank",rel:"noopener noreferrer"},ur=(0,l.Uk)("Java 客户端"),pr=(0,l.Uk)("。"),mr=(0,l._)("li",null,[(0,l._)("p",null,"可以（可选）使用消息代理（例如：RabbitMQ、ActiveMQ 与其他代理）来管理订阅与广播消息。")],-1),kr=(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("可以在任意数量的 "),(0,l._)("code",null,"@Controller"),(0,l.Uk)(" 实例中组织应用程序逻辑，并且可以基于 STOMP 目的地标头将消息路由到它们，而不是通过给定连接使用单个 "),(0,l._)("code",null,"WebSocketHandler"),(0,l.Uk)(" 处理原始 WebSocket 消息。")])],-1),dr=(0,l._)("li",null,[(0,l._)("p",null,"可以使用 Spring Security 基于 STOMP 目的地与消息类型来保护消息。")],-1),gr=(0,l._)("h3",{id:"_4-4-3-启用-stomp",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-3-启用-stomp","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.3. 启用 STOMP")],-1),hr=(0,l._)("p",null,[(0,l._)("code",null,"spring-messaging"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"spring-websocket"),(0,l.Uk)(" 模块中提供了 STOMP 通过 WebSocket 支持。 一旦有了这些依赖关系，就可以使用 "),(0,l._)("a",{href:"#_4-3-sockjs-%E5%9B%9E%E9%80%80"},"SockJS 回退"),(0,l.Uk)(" 通过 WebSocket 公开 STOMP 端点，如以下示例所示：")],-1),Sr=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/portfolio").withSockJS();  \n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) {\n        config.setApplicationDestinationPrefixes("/app"); \n        config.enableSimpleBroker("/topic", "/queue"); \n    }\n}\n')]),(0,l._)("div",{class:"highlight-lines"},[(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br")])],-1),Ur=(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"/portfolio"),(0,l.Uk)(" 是 WebSocket（或 SockJS）客户端为了 WebSocket 握手需要连接到的端点的 HTTP URL。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("其目的地标头以 "),(0,l._)("code",null,"/app"),(0,l.Uk)(" 开头的 STOMP 消息被路由到 "),(0,l._)("code",null,"@Controller"),(0,l.Uk)(" 类中的 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("使用内置的消息代理进行订阅与广播，以及将目的地标头以 "),(0,l._)("code",null,"/topic"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"/queue"),(0,l.Uk)(" 开头的消息路由到代理。")])])],-1),wr=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),vr=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:message-broker application-destination-prefix="/app">\n        <websocket:stomp-endpoint path="/portfolio">\n            <websocket:sockjs/>\n        </websocket:stomp-endpoint>\n        <websocket:simple-broker prefix="/topic, /queue"/>\n    </websocket:message-broker>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br")])],-1),fr=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("对于内置的简单代理，"),(0,l._)("code",null,"/topic"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"/queue"),(0,l.Uk)(" 前缀没有任何特殊含义。 它们仅是区分发布订阅消息传递与点对点消息传递的约定（即，许多订阅者与一个消费者）。 使用外部代理时，请检查代理的 STOMP 页面以了解其支持哪种 STOMP 目标与前缀。")])],-1),Mr=(0,l.Uk)("要从浏览器连接 SockJS，可以使用 "),Tr={href:"https://github.com/sockjs/sockjs-client",target:"_blank",rel:"noopener noreferrer"},Wr=(0,l._)("code",null,"sockjs-client",-1),Cr=(0,l.Uk)("。 对于 STOMP，许多应用程序都使用了 "),xr={href:"https://github.com/jmesnil/stomp-websocket",target:"_blank",rel:"noopener noreferrer"},Jr=(0,l.Uk)("jmesnil/stomp-websocket"),Pr=(0,l.Uk)(" 库（也称为 stomp.js），该库功能齐全，已在生产中使用多年，但不再维护。 目前，"),Hr={href:"https://github.com/JSteunou/webstomp-client",target:"_blank",rel:"noopener noreferrer"},yr=(0,l.Uk)("JSteunou/webstomp-client"),Er=(0,l.Uk)(" 是该库中最活跃且发展最快的后继程序。 以下示例代码基于此："),Or=(0,l._)("div",{class:"language-JavaScript ext-JavaScript line-numbers-mode"},[(0,l._)("pre",{class:"language-JavaScript"},[(0,l._)("code",null,'var socket = new SockJS("/spring-websocket-portfolio/portfolio");\nvar stompClient = webstomp.over(socket);\n\nstompClient.connect({}, function(frame) {\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br")])],-1),Br=(0,l._)("p",null,[(0,l.Uk)("请注意，前面示例中的 "),(0,l._)("code",null,"stompClient"),(0,l.Uk)(" 不需要指定 "),(0,l._)("code",null,"login"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"password"),(0,l.Uk)(" 标头。 即使这样做，它们也会在服务器端被忽略（或更确切地说，被覆盖）。 有关身份验证的更多信息，请参见"),(0,l._)("a",{href:"#_4-4-10-%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%BB%A3%E7%90%86"},"连接到代理"),(0,l.Uk)("与"),(0,l._)("a",{href:"#_4-4-12-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81"},"身份验证"),(0,l.Uk)("。")],-1),Ar=(0,l._)("p",null,"有关更多示例代码，请参见：",-1),Lr={href:"https://spring.io/guides/gs/messaging-stomp-websocket/",target:"_blank",rel:"noopener noreferrer"},Rr=(0,l.Uk)("使用 WebSocket 构建交互式 Web 应用程序"),Ir=(0,l.Uk)("——入门指南。"),jr={href:"https://github.com/rstoyanchev/spring-websocket-portfolio",target:"_blank",rel:"noopener noreferrer"},Xr=(0,l.Uk)("Stock Portfolio"),Nr=(0,l.Uk)("——一个示例应用程序。"),Dr=(0,l._)("h3",{id:"_4-4-4-websocket-服务端",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-4-websocket-服务端","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.4. WebSocket 服务端")],-1),Fr=(0,l._)("p",null,[(0,l.Uk)("要配置基础 WebSocket 服务器，请应用“"),(0,l._)("a",{href:"#_4-2-4-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE"},"服务端配置"),(0,l.Uk)("”中的信息。 但是对于Jetty，需要通过 "),(0,l._)("code",null,"StompEndpointRegistry"),(0,l.Uk)(" 设置 "),(0,l._)("code",null,"HandshakeHandler"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"WebSocketPolicy"),(0,l.Uk)("：")],-1),qr=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/portfolio").setHandshakeHandler(handshakeHandler());\n    }\n\n    @Bean\n    public DefaultHandshakeHandler handshakeHandler() {\n\n        WebSocketPolicy policy = new WebSocketPolicy(WebSocketBehavior.SERVER);\n        policy.setInputBufferSize(8192);\n        policy.setIdleTimeout(600000);\n\n        return new DefaultHandshakeHandler(\n                new JettyRequestUpgradeStrategy(new WebSocketServerFactory(policy)));\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br")])],-1),Gr=(0,l._)("h3",{id:"_4-4-5-消息流",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-5-消息流","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.5. 消息流")],-1),Vr=(0,l._)("p",null,"公开 STOMP 端点后，Spring 应用程序将成为已连接客户端的 STOMP 代理。 本节描述服务端的消息流。",-1),zr=(0,l._)("code",null,"spring-messaging",-1),Yr=(0,l.Uk)(" 模块包含对起源于 "),Qr={href:"https://spring.io/spring-integration",target:"_blank",rel:"noopener noreferrer"},Kr=(0,l.Uk)("Spring Integration"),Zr=(0,l.Uk)(" 的消息传递应用程序的基础支持，后来被提取并合并到 Spring Framework 中，以在许多 Spring 项目与应用程序场景中更广泛地使用。 下面的列表简要描述了一些可用的消息传递抽象："),$r={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/messaging/Message.html",target:"_blank",rel:"noopener noreferrer"},ea=(0,l.Uk)("Message"),na=(0,l.Uk)("： 消息的简单表示，包括标题和有效负载。"),sa={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/messaging/MessageHandler.html",target:"_blank",rel:"noopener noreferrer"},la=(0,l.Uk)("MessageHandler"),ra=(0,l.Uk)("： 处理消息的契约。"),aa={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/messaging/MessageChannel.html",target:"_blank",rel:"noopener noreferrer"},ca=(0,l.Uk)("MessageChannel"),ia=(0,l.Uk)("： 发送消息的契约，这使消息在生产者和消费者之间的松耦合成为可能。"),_a={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/messaging/SubscribableChannel.html",target:"_blank",rel:"noopener noreferrer"},oa=(0,l.Uk)("SubscribableChannel"),ta=(0,l.Uk)("： 带有 "),ba=(0,l._)("code",null,"MessageHandler",-1),ua=(0,l.Uk)(" 订阅者的 "),pa=(0,l._)("code",null,"MessageChannel",-1),ma=(0,l.Uk)("。"),ka={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/messaging/support/ExecutorSubscribableChannel.html",target:"_blank",rel:"noopener noreferrer"},da=(0,l.Uk)("ExecutorSubscribableChannel"),ga=(0,l.Uk)("： 使用 "),ha=(0,l._)("code",null,"Executor",-1),Sa=(0,l.Uk)(" 传递消息的 "),Ua=(0,l._)("code",null,"SubscribableChannel",-1),wa=(0,l.Uk)("。"),va=(0,l._)("p",null,[(0,l.Uk)("Java 配置（即 "),(0,l._)("code",null,"@EnableWebSocketMessageBroker"),(0,l.Uk)("）与 XML 命名空间配置（即 "),(0,l._)("code",null,"<websocket：message-broker>"),(0,l.Uk)("）都使用前面的组件来组装消息工作流。 下图展示了启用简单内置消息代理时使用的组件：")],-1),fa=(0,l._)("p",null,[(0,l._)("img",{src:r,alt:"消息流简单代理"})],-1),Ma=(0,l._)("p",null,"上图展示了三个消息通道：",-1),Ta=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)("：用于传递从 WebSocket 客户端收到的消息。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)("：用于向 WebSocket 客户端发送服务端消息。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"brokerChannel"),(0,l.Uk)("：用于从服务端应用程序代码内将消息发送到消息代理。")])])],-1),Wa=(0,l._)("p",null,"下图展示了将外部代理（例如 RabbitMQ）配置为用于管理订阅与广播消息时使用的组件：",-1),Ca=(0,l._)("p",null,[(0,l._)("img",{src:a,alt:"消息流代理转发"})],-1),xa=(0,l._)("p",null,"前面两个图之间的主要区别是使用“代理中继”将消息通过 TCP 传递到外部 STOMP 代理，以及将消息从代理传递到订阅的客户端。",-1),Ja=(0,l._)("p",null,[(0,l.Uk)("从 WebSocket 连接接收到消息后，它们将被解码为 STOMP 帧，转换为 Spring 消息表示形式，然后发送到 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 进行进一步处理。 例如：目的地标头以 "),(0,l._)("code",null,"/app"),(0,l.Uk)(" 开头的 STOMP 消息可以路由到控制器中带 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 注解的方法，而 "),(0,l._)("code",null,"/topic"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"/queue"),(0,l.Uk)(" 消息可以直接路由到消息代理。")],-1),Pa=(0,l._)("p",null,[(0,l.Uk)("处理来自客户端的 STOMP 消息的带注解的 "),(0,l._)("code",null,"@Controller"),(0,l.Uk)(" 可以通过 "),(0,l._)("code",null,"brokerChannel"),(0,l.Uk)(" 将消息发送到消息代理，并且代理通过 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)(" 将消息广播给匹配的订阅者。 相同的控制器还可以响应 HTTP 请求执行相同的操作，因此客户端可以执行 HTTP POST，然后 "),(0,l._)("code",null,"@PostMapping"),(0,l.Uk)(" 方法可以将消息发送到消息代理，以广播到订阅的客户端。")],-1),Ha=(0,l._)("p",null,"可以通过一个简单的示例跟踪流程。 考虑以下示例，该示例设置了服务器：",-1),ya=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/portfolio");\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        registry.setApplicationDestinationPrefixes("/app");\n        registry.enableSimpleBroker("/topic");\n    }\n}\n\n@Controller\npublic class GreetingController {\n\n    @MessageMapping("/greeting") {\n    public String handle(String greeting) {\n        return "[" + getTimestamp() + ": " + greeting;\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"21"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"22"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"23"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"24"),(0,l._)("br")])],-1),Ea=(0,l._)("p",null,"前面的示例支持以下流程：",-1),Oa=(0,l.Uk)("客户端连接到 "),Ba={href:"http://localhost:8080/portfolio",target:"_blank",rel:"noopener noreferrer"},Aa=(0,l.Uk)("http://localhost:8080/portfolio"),La=(0,l.Uk)("，一旦建立了 WebSocket 连接，STOMP 帧就开始在其上流动。"),Ra=(0,l.uE)("<li><p>客户端发送 SUBSCRIBE 帧，其目的地标头为 <code>/topic/greeting</code>。 接收并解码后，该消息将发送到 <code>clientInboundChannel</code>，然后路由到消息代理，该代理存储客户端订阅。</p></li><li><p>客户端向 <code>/app/greeting</code> 发送一个 aSEND 帧。 <code>/app</code> 前缀有助于将其路由到带注解的控制器。 删除 <code>/app</code> 前缀后，目标的其余 <code>/greeting</code> 部分将映射到 <code>GreetingController</code> 中的 <code>@MessageMapping</code> 方法。</p></li><li><p>从 <code>GreetingController</code> 返回的值被转换为带有有效负载的 Spring 消息，该有效负载基于返回值和 <code>/topic/greeting</code> 的默认目的地标头（从输入目的地派生，其中 <code>/app</code> 替换为 <code>/topic</code>）。 结果消息将发送到 <code>brokerChannel</code> 并由消息代理处理。</p></li><li><p>消息代理查找所有匹配的订阅者，并通过 <code>clientOutboundChannel</code> 向每个消息订阅者发送一个 MESSAGE 帧，消息在该消息中被编码为 STOMP 帧并通过 WebSocket 连接发送。</p></li>",4),Ia=(0,l._)("p",null,"下一节将提供有关带注解方法的更多详细信息，包括支持的参数类型与返回值。",-1),ja=(0,l._)("h3",{id:"_4-4-6-带注解的控制器",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-6-带注解的控制器","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.6. 带注解的控制器")],-1),Xa=(0,l._)("p",null,[(0,l.Uk)("应用程序可以使用带注解的 "),(0,l._)("code",null,"@Controller"),(0,l.Uk)(" 类来处理来自客户端的消息。 这样的类可以声明 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)("、"),(0,l._)("code",null,"@SubscribeMapping"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"@ExceptionHandler"),(0,l.Uk)(" 方法，如以下主题所述：")],-1),Na=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",{href:"#messagemapping"},[(0,l._)("code",null,"@MessageMapping")])])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",{href:"#subscribemapping"},[(0,l._)("code",null,"@SubscribeMapping")])])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",{href:"#exceptionhandler"},[(0,l._)("code",null,"@ExceptionHandler")])])])],-1),Da=(0,l._)("h4",{id:"messagemapping",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#messagemapping","aria-hidden":"true"},"#"),(0,l.Uk)(),(0,l._)("code",null,"@MessageMapping")],-1),Fa=(0,l._)("p",null,[(0,l.Uk)("可以使用 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 来注解基于目的地路由消息的方法。 在方法级与类型级都支持它。 在类级，"),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 用于表示控制器中所有方法之间的共享映射。")],-1),qa=(0,l._)("p",null,[(0,l.Uk)("默认情况下，映射值是 Ant 风格的路径模式（例如："),(0,l._)("code",null,"/thing*"),(0,l.Uk)("、"),(0,l._)("code",null,"/thing/**"),(0,l.Uk)("），包括对模板变量（例如："),(0,l._)("code",null,"/thing/{id}"),(0,l.Uk)("）的支持。 可以通过 "),(0,l._)("code",null,"@DestinationVariable"),(0,l.Uk)(" 方法参数引用这些值。 应用程序还可以切换到以点分隔的映射的目标约定，如“"),(0,l._)("a",{href:"#_4-4-11-%E5%B0%86%E7%82%B9%E4%BD%9C%E4%B8%BA%E5%88%86%E9%9A%94%E7%AC%A6"},"将点作为分隔符"),(0,l.Uk)("”中所述。")],-1),Ga=(0,l._)("h5",{id:"支持的方法参数",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#支持的方法参数","aria-hidden":"true"},"#"),(0,l.Uk)(" 支持的方法参数")],-1),Va=(0,l._)("p",null,"下表描述了方法参数：",-1),za=(0,l._)("table",null,[(0,l._)("thead",null,[(0,l._)("tr",null,[(0,l._)("th",null,"方法参数"),(0,l._)("th",null,"描述")])]),(0,l._)("tbody",null,[(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"Message")]),(0,l._)("td",null,"用于访问完整的消息。")]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"MessageHeaders")]),(0,l._)("td",null,[(0,l.Uk)("用于访问 "),(0,l._)("code",null,"Message"),(0,l.Uk)(" 中的标头。")])]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"MessageHeaderAccessor"),(0,l.Uk)("、"),(0,l._)("code",null,"SimpMessageHeaderAccessor"),(0,l.Uk)("、"),(0,l._)("code",null,"StompHeaderAccessor")]),(0,l._)("td",null,"用于通过类型化访问器方法访问标头。")]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"@Payload")]),(0,l._)("td",null,[(0,l.Uk)("为了访问消息的有效负载，由配置的 "),(0,l._)("code",null,"MessageConverter"),(0,l.Uk)(" 转换（例如，从 JSON）。"),(0,l._)("br"),(0,l.Uk)("不需要此注解，因为默认情况下会假定没有其它自变量匹配。"),(0,l._)("br"),(0,l.Uk)("可以使用 "),(0,l._)("code",null,"@javax.validation.Valid"),(0,l.Uk)(" 或 Spring 的 "),(0,l._)("code",null,"@Validated"),(0,l.Uk)(" 注解有效负载参数，以自动验证有效负载参数。")])]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"@Header")]),(0,l._)("td",null,[(0,l.Uk)("为了访问特定的标头值——以及必要时使用 "),(0,l._)("code",null,"org.springframework.core.convert.converter.Converter"),(0,l.Uk)(" 进行类型转换。")])]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"@Headers")]),(0,l._)("td",null,[(0,l.Uk)("用于访问消息中的所有标头。此参数必须可分配给 "),(0,l._)("code",null,"java.util.Map"),(0,l.Uk)("。")])]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"@DestinationVariable")]),(0,l._)("td",null,"用于访问从消息目的地中提取的模板变量。根据需要将值转换为声明的方法参数类型。")]),(0,l._)("tr",null,[(0,l._)("td",null,[(0,l._)("code",null,"java.security.Principal")]),(0,l._)("td",null,"反映在 WebSocket HTTP 握手时登录的用户。")])])],-1),Ya=(0,l._)("h5",{id:"返回值",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#返回值","aria-hidden":"true"},"#"),(0,l.Uk)(" 返回值")],-1),Qa=(0,l._)("p",null,[(0,l.Uk)("默认情况下，"),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法的返回值通过匹配的 "),(0,l._)("code",null,"MessageConverter"),(0,l.Uk)(" 序列化为有效负载，并作为消息发送到 "),(0,l._)("code",null,"brokerChannel"),(0,l.Uk)("，并从该消息广播到订阅者。 出站邮件的目的地与入站邮件的目的地相同，但以 "),(0,l._)("code",null,"/topic"),(0,l.Uk)(" 为前缀。")],-1),Ka=(0,l._)("p",null,[(0,l.Uk)("可以使用 "),(0,l._)("code",null,"@SendTo"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 注解来自定义输出消息的目的地。 "),(0,l._)("code",null,"@SendTo"),(0,l.Uk)(" 用于自定义目标位置或指定多个目标。 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 用于将输出消息定向到仅与输入消息关联的用户。 请参阅"),(0,l._)("a",{href:"#_4-4-14-%E7%94%A8%E6%88%B7%E7%9B%AE%E7%9A%84%E5%9C%B0"},"用户目的地"),(0,l.Uk)("。")],-1),Za=(0,l._)("p",null,[(0,l.Uk)("可以在同一方法上同时使用 "),(0,l._)("code",null,"@SendTo"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)("，并且两者在类级都受支持，在这种情况下，它们充当类中方法的默认值。 但是，请记住，任何方法级的 "),(0,l._)("code",null,"@SendTo"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 注解都会在类级别覆盖所有此类批注。")],-1),$a=(0,l._)("p",null,[(0,l.Uk)("消息可以异步处理，"),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法可以返回 "),(0,l._)("code",null,"ListenableFuture"),(0,l.Uk)("、"),(0,l._)("code",null,"CompletableFuture"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"CompletionStage"),(0,l.Uk)("。")],-1),ec=(0,l._)("p",null,[(0,l.Uk)("请注意，"),(0,l._)("code",null,"@SendTo"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 只是一种便利，等同于使用 "),(0,l._)("code",null,"SimpMessagingTemplate"),(0,l.Uk)(" 发送消息。 如有必要，对于更高级的方案，可以直接使用 "),(0,l._)("code",null,"SimpMessagingTemplate"),(0,l.Uk)(" 来使用 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法。 这可以代替返回值，也可以附加于返回值。 请参阅"),(0,l._)("a",{href:"#_4-4-7-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF"},"发送消息"),(0,l.Uk)("。")],-1),nc=(0,l._)("h4",{id:"subscribemapping",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#subscribemapping","aria-hidden":"true"},"#"),(0,l.Uk)(),(0,l._)("code",null,"@SubscribeMapping")],-1),sc=(0,l._)("p",null,[(0,l._)("code",null,"@SubscribeMapping"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 相似，但是将映射范围缩小到仅订阅消息。 它支持与 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 相同的"),(0,l._)("a",{href:"#messagemapping"},"方法参数"),(0,l.Uk)("。 但是，在默认情况下对于返回值，消息直接发送到客户端（通过 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)("，作为对订阅的响应），而不发送到代理（通过 "),(0,l._)("code",null,"brokerChannel"),(0,l.Uk)("，作为对匹配订阅的广播）。 添加 "),(0,l._)("code",null,"@SendTo"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 会覆盖此行为，而是发送给代理。")],-1),lc=(0,l._)("p",null,[(0,l.Uk)("什么时候有用？ 假定代理映射到 "),(0,l._)("code",null,"/topic"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"/queue"),(0,l.Uk)("，而应用程序控制器映射到 "),(0,l._)("code",null,"/app"),(0,l.Uk)("。 在此设置中，代理将存储 "),(0,l._)("code",null,"/topic"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"/queue"),(0,l.Uk)(" 的所有订阅，这些订阅旨在进行重复广播，并且不需要应用程序参与。 客户端还可以订阅某个 "),(0,l._)("code",null,"/app"),(0,l.Uk)(" 目的地，并且控制器可以响应该订阅而返回一个值，而无需代理，而无需再次存储或使用该订阅（实际上是一次请求 - 答复交换）。 一个用例是在启动时用初始数据填充 UI。")],-1),rc=(0,l._)("p",null,[(0,l.Uk)("什么时候没用？ 不要尝试将代理与控制器映射到相同的目标前缀，除非出于某种原因希望两者都独立处理消息（包括订阅）。 入站消息是并行处理的。 不能保证代理或控制器首先处理给定的消息。 如果要在存储订阅并准备广播时通知目标，那么客户端应询问服务端是否支持收据（简单代理不支持）。 例如，对于 Java "),(0,l._)("a",{href:"#_4-4-18-stomp-%E5%AE%A2%E6%88%B7%E7%AB%AF"},"STOMP 客户端"),(0,l.Uk)("，可以执行以下操作添加收据：")],-1),ac=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Autowired\nprivate TaskScheduler messageBrokerTaskScheduler;\n\n// During initialization..\nstompClient.setTaskScheduler(this.messageBrokerTaskScheduler);\n\n// When subscribing..\nStompHeaders headers = new StompHeaders();\nheaders.setDestination("/topic/...");\nheaders.setReceipt("r1");\nFrameHandler handler = ...;\nstompSession.subscribe(headers, handler).addReceiptTask(() -> {\n    // Subscription ready...\n});\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br")])],-1),cc=(0,l._)("p",null,[(0,l.Uk)("服务端的一种选择是在 "),(0,l._)("code",null,"brokerChannel"),(0,l.Uk)(" 上"),(0,l._)("a",{href:"#_4-4-17-%E6%8B%A6%E6%88%AA"},"注册"),(0,l.Uk)("一个 "),(0,l._)("code",null,"ExecutorChannelInterceptor"),(0,l.Uk)(" 并实现 "),(0,l._)("code",null,"afterMessageHandled"),(0,l.Uk)(" 方法，该方法在处理消息（包括订阅）之后被调用。")],-1),ic=(0,l._)("h4",{id:"exceptionhandler",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#exceptionhandler","aria-hidden":"true"},"#"),(0,l.Uk)(),(0,l._)("code",null,"@ExceptionHandler")],-1),_c=(0,l._)("p",null,[(0,l.Uk)("应用程序可以使用 "),(0,l._)("code",null,"@MessageExceptionHandler"),(0,l.Uk)(" 方法来处理 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法中的异常。 如果要访问异常实例，那么可以在注解本身中声明异常，也可以通过方法参数声明异常。 以下示例通过方法参数声明异常：")],-1),oc=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Controller\npublic class MyController {\n\n    // ...\n\n    @MessageExceptionHandler\n    public ApplicationError handleException(MyException exception) {\n        // ...\n        return appError;\n    }\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br")])],-1),tc=(0,l._)("p",null,[(0,l._)("code",null,"@MessageExceptionHandler"),(0,l.Uk)(" 方法支持灵活的方法签名，并支持与 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法相同的方法参数类型与返回值。")],-1),bc=(0,l.Uk)("通常，"),uc=(0,l._)("code",null,"@MessageExceptionHandler",-1),pc=(0,l.Uk)(" 方法适用于声明它们的 "),mc=(0,l._)("code",null,"@Controller",-1),kc=(0,l.Uk)(" 类（或类层次结构）。 如果希望此类方法在全局范围内（跨控制器）应用，那么可以在标有 "),dc=(0,l._)("code",null,"@ControllerAdvice",-1),gc=(0,l.Uk)(" 的类中声明它们。 这与 Spring MVC 中可用的"),hc={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-controller-advice",target:"_blank",rel:"noopener noreferrer"},Sc=(0,l.Uk)("类似支持"),Uc=(0,l.Uk)("相当。"),wc=(0,l._)("h3",{id:"_4-4-7-发送消息",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-7-发送消息","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.7. 发送消息")],-1),vc=(0,l._)("p",null,[(0,l.Uk)("如果要从应用程序的任何部分向连接的客户端发送消息怎么办？ 任何应用程序组件都可以将消息发送到 "),(0,l._)("code",null,"brokerChannel"),(0,l.Uk)("。 最简单的方法是注入 "),(0,l._)("code",null,"SimpMessagingTemplate"),(0,l.Uk)(" 并使用它发送消息。 通常，将按类型注入它，如以下示例所示：")],-1),fc=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Controller\npublic class GreetingController {\n\n    private SimpMessagingTemplate template;\n\n    @Autowired\n    public GreetingController(SimpMessagingTemplate template) {\n        this.template = template;\n    }\n\n    @RequestMapping(path="/greetings", method=POST)\n    public void greet(String greeting) {\n        String text = "[" + getTimestamp() + "]:" + greeting;\n        this.template.convertAndSend("/topic/greetings", text);\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br")])],-1),Mc=(0,l._)("p",null,[(0,l.Uk)("但是，如果存在另一个相同类型的 bean，也可以通过其名称（"),(0,l._)("code",null,"brokerMessagingTemplate"),(0,l.Uk)("）对其进行限定。")],-1),Tc=(0,l._)("h3",{id:"_4-4-8-简单代理",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-8-简单代理","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.8. 简单代理")],-1),Wc=(0,l._)("p",null,"内置的简单消息代理处理来自客户端的订阅请求，将其存储在内存中，并将消息广播到具有匹配目的地的已连接客户端。 该代理支持类似路径的目的地，包括订阅 Ant 风格的目的地模式。",-1),Cc=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("应用程序还可以使用点分隔（而不是斜杠分隔）目的地。 请参阅"),(0,l._)("a",{href:"#_4-4-11-%E5%B0%86%E7%82%B9%E4%BD%9C%E4%B8%BA%E5%88%86%E9%9A%94%E7%AC%A6"},"将点作为分隔符"),(0,l.Uk)("。")])],-1),xc=(0,l._)("p",null,"如果配置了任务调度程序，那么简单代理支持 STOMP 心跳。 为此，可以声明自己的调度程序，也可以使用内部自动声明与使用的调度程序。 以下示例展示如何声明自己的调度程序：",-1),Jc=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    private TaskScheduler messageBrokerTaskScheduler;\n\n    @Autowired\n    public void setMessageBrokerTaskScheduler(TaskScheduler taskScheduler) {\n        this.messageBrokerTaskScheduler = taskScheduler;\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n\n        registry.enableSimpleBroker("/queue/", "/topic/")\n                .setHeartbeatValue(new long[] {10000, 20000})\n                .setTaskScheduler(this.messageBrokerTaskScheduler);\n\n        // ...\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"21"),(0,l._)("br")])],-1),Pc=(0,l._)("h3",{id:"_4-4-9-外部代理",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-9-外部代理","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.9. 外部代理")],-1),Hc=(0,l._)("p",null,"简单代理非常适合入门，但仅支持 STOMP 命令的子集（它不支持 ack、收据与其他一些特性），依赖于简单的消息发送循环，并且不适合于集群。 或者，可以升级应用程序以使用功能齐全的消息代理。",-1),yc=(0,l.Uk)("请参阅 STOMP 文档以了解选择的消息代理（例如 "),Ec={href:"https://www.rabbitmq.com/stomp.html",target:"_blank",rel:"noopener noreferrer"},Oc=(0,l.Uk)("RabbitMQ"),Bc=(0,l.Uk)("、"),Ac={href:"https://activemq.apache.org/stomp.html",target:"_blank",rel:"noopener noreferrer"},Lc=(0,l.Uk)("ActiveMQ"),Rc=(0,l.Uk)(" 与其它），安装代理，并在启用 STOMP 支持的情况下运行它。 然后，可以在 Spring 配置中启用 STOMP 代理中继（而不是简单代理）。"),Ic=(0,l._)("p",null,"以下示例配置启用了功能齐全的代理：",-1),jc=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/portfolio").withSockJS();\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        registry.enableStompBrokerRelay("/topic", "/queue");\n        registry.setApplicationDestinationPrefixes("/app");\n    }\n\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br")])],-1),Xc=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),Nc=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:message-broker application-destination-prefix="/app">\n        <websocket:stomp-endpoint path="/portfolio" />\n            <websocket:sockjs/>\n        </websocket:stomp-endpoint>\n        <websocket:stomp-broker-relay prefix="/topic,/queue" />\n    </websocket:message-broker>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br")])],-1),Dc=(0,l.Uk)("先前配置中的 STOMP 代理中继是一个 Spring "),Fc={href:"https://docs.spring.io/spring-framework/docs/5.3.4/javadoc-api/org/springframework/messaging/MessageHandler.html",target:"_blank",rel:"noopener noreferrer"},qc=(0,l._)("code",null,"MessageHandler",-1),Gc=(0,l.Uk)("，它通过将消息转发到外部消息代理来处理消息。 为此，它建立到代理的 TCP 连接，将所有消息转发给代理，然后通过客户端的 WebSocket 会话将从代理收到的所有消息转发给客户端。 本质上，它充当双向转发消息的“中继”。"),Vc=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("将 "),(0,l._)("code",null,"io.projectreactor.netty:reactor-netty"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"io.netty:netty-all"),(0,l.Uk)(" 所有依赖项添加到项目中以进行 TCP 连接管理。")])],-1),zc=(0,l._)("p",null,[(0,l.Uk)("此外，应用程序组件（例如 HTTP 请求处理方法、业务服务等）还可以将消息发送到代理中继，如“"),(0,l._)("a",{href:"#_4-4-7-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF"},"发送消息"),(0,l.Uk)("”中所述，将消息广播到订阅的 WebSocket 客户端。")],-1),Yc=(0,l._)("p",null,"实际上，代理中继可实现健壮且可伸缩的消息广播。",-1),Qc=(0,l._)("h3",{id:"_4-4-10-连接到代理",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-10-连接到代理","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.10. 连接到代理")],-1),Kc=(0,l._)("p",null,[(0,l.Uk)("STOMP 代理中继器维护与代理的单个“系统”TCP 连接。 此连接仅用于源自服务端应用程序的消息，而不用于接收消息。 可以为此连接配置 STOMP 凭据（即 STOMP 帧 "),(0,l._)("code",null,"login"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"passcode"),(0,l.Uk)(" 标头）。 这在 XML 命名空间与 Java 配置中都以 "),(0,l._)("code",null,"systemLogin"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"systemPasscode"),(0,l.Uk)(" 属性（默认值为 "),(0,l._)("code",null,"guest"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"guest"),(0,l.Uk)("）公开。")],-1),Zc=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("STOMP 代理中继始终在代表客户端转发给代理的每个 "),(0,l._)("code",null,"CONNECT"),(0,l.Uk)(" 帧上设置 "),(0,l._)("code",null,"login"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"passcode"),(0,l.Uk)(" 标头。 因此，WebSocket 客户端无需设置这些标头。 它们将被忽略。 如“"),(0,l._)("a",{href:"#_4-4-12-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81"},"身份验证"),(0,l.Uk)("”部分所述，WebSocket 客户端应改为依靠 HTTP 身份验证来保护 WebSocket 端点并建立客户端身份。")])],-1),$c=(0,l._)("p",null,"STOMP 代理中继还通过“系统” TCP 连接向消息代理发送与从消息代理接收心跳。 可以配置发送与接收心跳的间隔（默认间隔为 10 秒）。 如果与代理的连接断开，那么代理中继每 5 秒继续尝试重新连接，直到成功。",-1),ei=(0,l._)("p",null,[(0,l.Uk)("当与代理的“系统”连接丢失并重新建立时，任何 Spring bean 都可以实现 "),(0,l._)("code",null,"ApplicationListener<BrokerAvailabilityEvent>"),(0,l.Uk)(" 来接收通知。 例如，当没有活动的“系统”连接时，广播股票报价的股票报价服务可以停止尝试发送消息。")],-1),ni=(0,l._)("p",null,"默认情况下，STOMP 代理中继始终连接到同一主机和端口，如果连接断开，那么根据需要重新连接。 如果希望提供多个地址，那么在每次尝试连接时，都可以配置地址供应商，而不是固定的主机与端口。 以下示例展示了如何执行此操作：",-1),si=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {\n\n    // ...\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        registry.enableStompBrokerRelay("/queue/", "/topic/").setTcpClient(createTcpClient());\n        registry.setApplicationDestinationPrefixes("/app");\n    }\n\n    private ReactorNettyTcpClient<byte[]> createTcpClient() {\n        return new ReactorNettyTcpClient<>(\n                client -> client.addressSupplier(() -> ... ),\n                new StompReactorNettyCodec());\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br")])],-1),li=(0,l._)("p",null,[(0,l.Uk)("还可以使用 "),(0,l._)("code",null,"virtualHost"),(0,l.Uk)(" 属性配置 STOMP 代理中继。 此属性的值设置为每个 "),(0,l._)("code",null,"CONNECT"),(0,l.Uk)(" 帧的 "),(0,l._)("code",null,"host"),(0,l.Uk)(" 标头，这很有用（例如，在云环境中，建立 TCP 连接的实际主机与提供基于云的 STOMP 服务的主机是不同的）。")],-1),ri=(0,l._)("h3",{id:"_4-4-11-将点作为分隔符",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-11-将点作为分隔符","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.11. 将点作为分隔符")],-1),ai=(0,l._)("p",null,[(0,l.Uk)("将消息路由到 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法时，它们将与 "),(0,l._)("code",null,"AntPathMatcher"),(0,l.Uk)(" 进行匹配。 默认情况下，模式应使用斜杠（"),(0,l._)("code",null,"/"),(0,l.Uk)("）作为分隔符。 这是 Web 应用程序中的一个良好约定，类似于 HTTP URL。 但是，如果更习惯于消息传递约定，那么可以切换为使用点（"),(0,l._)("code",null,"."),(0,l.Uk)("）作为分隔符。")],-1),ci=(0,l._)("p",null,"以下示例展示了如何在Java配置中执行此操作：",-1),ii=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    // ...\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        registry.setPathMatcher(new AntPathMatcher("."));\n        registry.enableStompBrokerRelay("/queue", "/topic");\n        registry.setApplicationDestinationPrefixes("/app");\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br")])],-1),_i=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),oi=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xmlns:websocket="http://www.springframework.org/schema/websocket"\n        xsi:schemaLocation="\n                http://www.springframework.org/schema/beans\n                https://www.springframework.org/schema/beans/spring-beans.xsd\n                http://www.springframework.org/schema/websocket\n                https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:message-broker application-destination-prefix="/app" path-matcher="pathMatcher">\n        <websocket:stomp-endpoint path="/stomp"/>\n        <websocket:stomp-broker-relay prefix="/topic,/queue" />\n    </websocket:message-broker>\n\n    <bean id="pathMatcher" class="org.springframework.util.AntPathMatcher">\n        <constructor-arg index="0" value="."/>\n    </bean>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br")])],-1),ti=(0,l._)("p",null,[(0,l.Uk)("然后，控制器可以使用点（"),(0,l._)("code",null,"."),(0,l.Uk)("）作为 "),(0,l._)("code",null,"@MessageMapping"),(0,l.Uk)(" 方法中的分隔符，如以下示例所示：")],-1),bi=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Controller\n@MessageMapping("red")\npublic class RedController {\n\n    @MessageMapping("blue.{green}")\n    public void handleGreen(@DestinationVariable String green) {\n        // ...\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br")])],-1),ui=(0,l._)("p",null,[(0,l.Uk)("客户端现在可以将消息发送到 "),(0,l._)("code",null,"/app/red.blue.green123"),(0,l.Uk)("。")],-1),pi=(0,l._)("p",null,"在前面的示例中，没有更改“代理中继”上的前缀，因为这些前缀完全取决于外部消息代理。 有关使用的代理的信息，请参见 STOMP 文档页面，以查看其对目的地标头支持的约定。",-1),mi=(0,l._)("p",null,[(0,l.Uk)("另一方面，“简单代理”确实依赖于已配置的 "),(0,l._)("code",null,"PathMatcher"),(0,l.Uk)("，因此，如果切换分隔符，该更改也将应用于代理，以及代理将目的地从消息匹配到订阅中的模式的方式。")],-1),ki=(0,l._)("h3",{id:"_4-4-12-身份验证",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-12-身份验证","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.12. 身份验证")],-1),di=(0,l._)("p",null,"每个通过 WebSocket 进行的 STOMP 消息传递会话均以 HTTP 请求开头。 这可以是升级到 WebSockets 的请求（即 WebSocket 握手），或者在 SockJS 回退的情况下，可以是一系列 SockJS HTTP 传输请求。",-1),gi=(0,l._)("p",null,"许多 Web 应用程序已经具有身份验证和授权来保护 HTTP 请求。 通常，使用某种机制（例如：登录页面、HTTP 基本认证或其他方式）通过 Spring Security 对用户进行认证。 经过身份验证的用户的安全性上下文保存在 HTTP 会话中，并与同一基于 cookie 的会话中的后续请求相关联。",-1),hi=(0,l._)("p",null,[(0,l.Uk)("因此，对于 WebSocket 握手或 SockJS HTTP 传输请求，通常已经有一个可以通过 "),(0,l._)("code",null,"HttpServletRequest#getUserPrincipal()"),(0,l.Uk)(" 访问的经过身份验证的用户。 Spring 会自动将该用户与为其创建的 WebSocket 或 SockJS 会话相关联，并随后与通过该用户标头在该会话上传输的所有 STOMP 消息相关联。")],-1),Si=(0,l._)("p",null,[(0,l.Uk)("简而言之，一个典型的 Web 应用程序除了已经为安全性做的事情之外，不需要做任何其他事情。 通过基于 cookie 的 HTTP 会话（然后与为该用户创建的 WebSocket 或 SockJS 会话相关联）维护的安全上下文在 HTTP 请求级别对用户进行身份验证，并导致在流经应用程序的每个 "),(0,l._)("code",null,"Message"),(0,l.Uk)(" 上加盖用户标头。")],-1),Ui=(0,l._)("p",null,[(0,l.Uk)("请注意，STOMP 协议在 "),(0,l._)("code",null,"CONNECT"),(0,l.Uk)(" 帧上确实具有 "),(0,l._)("code",null,"login"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"passcode"),(0,l.Uk)(" 标头。 它们最初是为 TCP 设计的，现在仍然需要它们，例如：基于 TCP 的 STOMP。 但是，对于基于 WebSocket 的 STOMP，默认情况下，Spring 会忽略 STOMP 协议级别的授权标头，假定用户已经在 HTTP 传输级别进行了身份验证，并期望 WebSocket 或 SockJS 会话包含已通过身份验证的用户。")],-1),wi={class:"custom-container tip"},vi=(0,l._)("p",{class:"custom-container-title"},"TIP",-1),fi=(0,l.Uk)("Spring Security 提供了 "),Mi={href:"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#websocket",target:"_blank",rel:"noopener noreferrer"},Ti=(0,l.Uk)("WebSocket 子协议授权"),Wi=(0,l.Uk)("，该授权使用 "),Ci=(0,l._)("code",null,"ChannelInterceptor",-1),xi=(0,l.Uk)(" 来基于消息中的用户标头对消息进行授权。 而且，Spring Session 提供了 "),Ji={href:"https://docs.spring.io/spring-session/docs/current/reference/html5/#websocket",target:"_blank",rel:"noopener noreferrer"},Pi=(0,l.Uk)("WebSocket 集成"),Hi=(0,l.Uk)("，以确保当 WebSocket 会话仍处于活动状态时，用户 HTTP 会话不会过期。"),yi=(0,l._)("h3",{id:"_4-4-13-令牌-token-验证",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-13-令牌-token-验证","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.13. 令牌（Token）验证")],-1),Ei={href:"https://github.com/spring-projects/spring-security-oauth",target:"_blank",rel:"noopener noreferrer"},Oi=(0,l.Uk)("Spring Security OAuth"),Bi=(0,l.Uk)(" 支持基于令牌的安全支持，包括 JSON Web 令牌（JWT）。 可以将其用作 Web 应用程序中的身份验证机制，包括上一节中所述的 WebAPI 交互中的 STOMP（即通过基于 cookie 的会话维护身份）。"),Ai=(0,l._)("p",null,"同时，基于 cookie 的会话并非总是最合适的（例如，在不维护服务端会话的应用程序中或在通常使用标头进行身份验证的移动应用程序中）。",-1),Li={href:"https://tools.ietf.org/html/rfc6455#section-10.5",target:"_blank",rel:"noopener noreferrer"},Ri=(0,l.Uk)("WebSocket 协议 RFC 6455"),Ii=(0,l.Uk)("中“在 WebSocket 握手过程中，服务端没有指定任何特定的方式来验证客户端。” 然而，在实践中，浏览器客户端只能使用标准的身份验证标头（即基本 HTTP 身份验证）或 cookie，而不能（例如）提供自定义的标头。 同样，SockJS JavaScript 客户端也不提供通过 SockJS 传输请求发送 HTTP 标头的方法。 请参阅 "),ji={href:"https://github.com/sockjs/sockjs-client/issues/196",target:"_blank",rel:"noopener noreferrer"},Xi=(0,l.Uk)("sockjs-client 问题 196"),Ni=(0,l.Uk)("。 相反，它确实允许发送可用于发送令牌的查询参数，但是有其自身的缺点（例如，令牌可能会无意中与服务器日志中的 URL 一起记录）。"),Di=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,"前述限制适用于基于浏览器的客户端，不适用于基于 Spring Java 的 STOMP 客户端，该客户端确实支持通过 WebSocket 与 SockJS 请求发送标头。")],-1),Fi=(0,l._)("p",null,"因此，希望避免使用 cookie 的应用程序可能没有在 HTTP 协议级别进行身份验证的任何好的替代方案。 他们可能更喜欢在 STOMP 消息传递协议级别使用标头进行身份验证，而不是使用 cookie。 这样做需要两个简单的步骤：",-1),qi=(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("p",null,"使用 STOMP 客户端在连接时传递身份验证标头。")]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("使用 "),(0,l._)("code",null,"ChannelInterceptor"),(0,l.Uk)(" 处理身份验证标头。")])])],-1),Gi=(0,l._)("p",null,[(0,l.Uk)("下一个示例使用服务器端配置来注册自定义身份验证拦截器。 请注意，拦截器仅需要认证并在 CONNECT "),(0,l._)("code",null,"Message"),(0,l.Uk)(" 上设置用户标头。 Spring 记录并保存经过身份验证的用户，并将其与同一会话上的后续 STOMP 消息相关联。 以下示例展示了如何注册自定义身份验证拦截器：")],-1),Vi=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Configuration\n@EnableWebSocketMessageBroker\npublic class MyConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureClientInboundChannel(ChannelRegistration registration) {\n        registration.interceptors(new ChannelInterceptor() {\n            @Override\n            public Message<?> preSend(Message<?> message, MessageChannel channel) {\n                StompHeaderAccessor accessor =\n                        MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);\n                if (StompCommand.CONNECT.equals(accessor.getCommand())) {\n                    Authentication user = ... ; // access authentication header(s)\n                    accessor.setUser(user);\n                }\n                return message;\n            }\n        });\n    }\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br")])],-1),zi=(0,l._)("p",null,[(0,l.Uk)("另外，请注意，目前，当使用 Spring Security 的消息授权时，需要确保在 Spring Security 之前订阅了 "),(0,l._)("code",null,"ChannelInterceptor"),(0,l.Uk)(" 身份验证配置。 最好通过在其自己的 "),(0,l._)("code",null,"WebSocketMessageBrokerConfigurer"),(0,l.Uk)(" 实现中声明自定义拦截器来完成，该实现用 "),(0,l._)("code",null,"@Order(Ordered.HIGHEST_PRECEDENCE + 99)"),(0,l.Uk)(" 标记。")],-1),Yi=(0,l._)("h3",{id:"_4-4-14-用户目的地",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-14-用户目的地","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.14. 用户目的地")],-1),Qi=(0,l._)("p",null,[(0,l.Uk)("应用程序可以发送针对特定用户的消息，并且 Spring 的 STOMP 支持可以识别以 "),(0,l._)("code",null,"/user/"),(0,l.Uk)(" 为前缀的目的地。 例如，客户端可能订阅了 "),(0,l._)("code",null,"/user/queue/position-updates"),(0,l.Uk)(" 目的地。 该目的地由 "),(0,l._)("code",null,"UserDestinationMessageHandler"),(0,l.Uk)(" 处理，并转换为用户会话唯一的目的地（例如 "),(0,l._)("code",null,"/queue/position-updates-user123"),(0,l.Uk)("）。 这提供了订阅通用命名目的地的便利，同时确保与订阅相同目的地的其他用户不发生冲突，以便每个用户都可以接收唯一的持仓更新。")],-1),Ki=(0,l._)("p",null,[(0,l.Uk)("在发送方，可以将消息发送到一个目的地，例如 "),(0,l._)("code",null,"/user/{username}/queue/position-updates"),(0,l.Uk)("，然后将其由 "),(0,l._)("code",null,"UserDestinationMessageHandler"),(0,l.Uk)(" 转换为一个或多个目的地，每个与用户关联的会话一个目的地。 这样，应用程序中的任何组件都可以发送针对特定用户的消息，而不必知道他们的姓名与通用目的地。 注解与消息传递模板也支持此特性。")],-1),Zi=(0,l._)("p",null,[(0,l.Uk)("消息处理方法可以通过 "),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 注解将消息发送给与正在处理的消息相关联的用户（在类级上也支持共享公共目标），如以下示例所示：")],-1),$i=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Controller\npublic class PortfolioController {\n\n    @MessageMapping("/trade")\n    @SendToUser("/queue/position-updates")\n    public TradeResult executeTrade(Trade trade, Principal principal) {\n        // ...\n        return tradeResult;\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br")])],-1),e_=(0,l._)("p",null,[(0,l.Uk)("如果用户具有多个会话，那么默认情况下，所有订阅给定目标的会话都将成为目的地。 但是，有时可能仅需要将发送正在处理的消息的会话作为目的地。 可以通过将 "),(0,l._)("code",null,"broadcast"),(0,l.Uk)(" 属性设置为 "),(0,l._)("code",null,"false"),(0,l.Uk)(" 来做到这一点，如以下示例所示：")],-1),n_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Controller\npublic class MyController {\n\n    @MessageMapping("/action")\n    public void handleAction() throws Exception{\n        // raise MyBusinessException here\n    }\n\n    @MessageExceptionHandler\n    @SendToUser(destinations="/queue/errors", broadcast=false)\n    public ApplicationError handleException(MyBusinessException exception) {\n        // ...\n        return appError;\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br")])],-1),s_=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("尽管用户目的地通常暗指经过身份验证的用户，但这并不是严格要求的。 与已认证用户不关联的 WebSocket 会话可以订阅用户目的地。 在这种情况下，"),(0,l._)("code",null,"@SendToUser"),(0,l.Uk)(" 注解的行为与 "),(0,l._)("code",null,"broadcast=false"),(0,l.Uk)(" 完全相同（也就是说，仅针对发送正在处理的消息的会话）。")])],-1),l_=(0,l._)("p",null,[(0,l.Uk)("可以从任何应用程序组件向用户目的地发送消息，例如，注入由 Java 配置或 XML 命名空间创建的 "),(0,l._)("code",null,"SimpMessagingTemplate"),(0,l.Uk)("。 （如果需要使用 "),(0,l._)("code",null,"@Qualifier"),(0,l.Uk)(" 进行限定，那么 bean 名称为 "),(0,l._)("code",null,"brokerMessagingTemplate"),(0,l.Uk)("。） 下面的示例演示了如何执行此操作：")],-1),r_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Service\npublic class TradeServiceImpl implements TradeService {\n\n    private final SimpMessagingTemplate messagingTemplate;\n\n    @Autowired\n    public TradeServiceImpl(SimpMessagingTemplate messagingTemplate) {\n        this.messagingTemplate = messagingTemplate;\n    }\n\n    // ...\n\n    public void afterTradeExecuted(Trade trade) {\n        this.messagingTemplate.convertAndSendToUser(\n                trade.getUserName(), "/queue/position-updates", trade.getResult());\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br")])],-1),a_={class:"custom-container tip"},c_=(0,l._)("p",{class:"custom-container-title"},"TIP",-1),i_=(0,l.Uk)("将用户目标与外部消息代理一起使用时，应查看代理文档以了解如何管理非活动队列，以便在用户会话结束时，将删除所有唯一的用户队列。 例如，当使用诸如 "),__=(0,l._)("code",null,"/exchange/amq.direct/position-updates",-1),o_=(0,l.Uk)(" 之类的目的地时，RabbitMQ 会创建自动删除队列。 因此，在这种情况下，客户端可以订阅 "),t_=(0,l._)("code",null,"/user/exchange/amq.direct/position-updates",-1),b_=(0,l.Uk)("。 同样，ActiveMQ 具有用于清除非活动目标的"),u_={href:"https://activemq.apache.org/delete-inactive-destinations.html",target:"_blank",rel:"noopener noreferrer"},p_=(0,l.Uk)("配置选项"),m_=(0,l.Uk)("。"),k_=(0,l._)("p",null,[(0,l.Uk)("在多应用程序服务器方案中，由于用户连接到其他服务器，因此用户目的地可能无法解析。 在这种情况下，可以配置目的地以广播未解决的消息，以便其他服务器可以尝试。 这可以通过 Java 配置中 "),(0,l._)("code",null,"MessageBrokerRegistry"),(0,l.Uk)(" 的 "),(0,l._)("code",null,"userDestinationBroadcast"),(0,l.Uk)(" 属性以及 XML 中 "),(0,l._)("code",null,"message-broker"),(0,l.Uk)(" 元素的 "),(0,l._)("code",null,"user-destination-broadcast"),(0,l.Uk)(" 属性来完成。")],-1),d_=(0,l._)("h3",{id:"_4-4-15-消息顺序",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-15-消息顺序","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.15. 消息顺序")],-1),g_=(0,l._)("p",null,[(0,l.Uk)("来自代理的消息被发布到 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)("，从那里被写入 WebSocket 会话。 由于该通道由 "),(0,l._)("code",null,"ThreadPoolExecutor"),(0,l.Uk)(" 支持，因此消息在不同的线程中处理，并且客户端接收到的结果序列可能与发布的确切顺序不匹配。")],-1),h_=(0,l._)("p",null,[(0,l.Uk)("如果这是一个问题，请启用 "),(0,l._)("code",null,"setPreservePublishOrder"),(0,l.Uk)(" 标志，如以下示例所示：")],-1),S_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Configuration\n@EnableWebSocketMessageBroker\npublic class MyConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    protected void configureMessageBroker(MessageBrokerRegistry registry) {\n        // ...\n        registry.setPreservePublishOrder(true);\n    }\n\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br")])],-1),U_=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),w_=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:message-broker preserve-publish-order="true">\n        \x3c!-- ... --\x3e\n    </websocket:message-broker>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br")])],-1),v_=(0,l._)("p",null,[(0,l.Uk)("设置该标志后，同一客户端会话中的消息将一次一个地发布到 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)("，这样可以保证发布顺序。 请注意，这会产生较小的性能开销，因此，只有在需要时启用它。")],-1),f_=(0,l._)("h3",{id:"_4-4-16-事件",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-16-事件","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.16. 事件")],-1),M_=(0,l._)("p",null,[(0,l.Uk)("几个 "),(0,l._)("code",null,"ApplicationContext"),(0,l.Uk)(" 事件被发布，并且可以通过实现 Spring 的 "),(0,l._)("code",null,"ApplicationListener"),(0,l.Uk)(" 接口来接收：")],-1),T_=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"BrokerAvailabilityEvent"),(0,l.Uk)("： 指示代理何时可用或不可用。 虽然“简单”代理在启动时立即可用，并在应用程序运行时保持可用，但 STOMP“代理中继”可能会失去与全功能代理的连接（例如，重新启动代理）。 代理中继具有重新连接逻辑，并在代理返回时重新建立与代理的“系统”连接。 结果，只要状态从已连接变为断开，就会发布此事件，反之亦然。 使用 "),(0,l._)("code",null,"SimpMessagingTemplate"),(0,l.Uk)(" 的组件应订阅此事件，并避免在代理不可用时发送消息。 在任何情况下，当发送消息时，都应该准备好处理 "),(0,l._)("code",null,"MessageDeliveryException"),(0,l.Uk)("。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"SessionConnectEvent"),(0,l.Uk)("： 在收到新的 STOMP CONNECT 帧时发布，以指示新的客户端会话的开始。 该事件包含代表连接的消息，包括：会话 ID、用户信息（如果有）与客户端发送的所有自定义标头。 这对于跟踪客户端会话很有用。 订阅此事件的组件可以使用 "),(0,l._)("code",null,"SimpMessageHeaderAccessor"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"StompMessageHeaderAccessor"),(0,l.Uk)(" 包装包含的消息。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"SessionConnectedEvent"),(0,l.Uk)("： 当代理发送了一个 STOMP CONNECTED 帧来响应 CONNECT 时，在 "),(0,l._)("code",null,"SessionConnectEvent"),(0,l.Uk)(" 之后不久发布。 此时，可以认为 STOMP 会话已完全建立。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"SessionSubscribeEvent"),(0,l.Uk)("： 在收到新的 STOMP SUBSCRIBE 帧时发布。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"SessionUnsubscribeEvent"),(0,l.Uk)("： 在收到新的 STOMP UNSUBSCRIBE 帧时发布。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("code",null,"SessionDisconnectEvent"),(0,l.Uk)("： 在 STOMP 会话结束时发布。 DISCONNECT 帧可能是从客户端发送的，也可能是在 WebSocket 会话关闭时自动生成的。 在某些情况下，这个事件在每个会话中发布不止一次。 组件对于多个断开连接事件应该是幂等的。")])])],-1),W_=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,"当使用全功能代理时，如果代理暂时不可用，那么 STOMP“代理中继”会自动重新连接“系统”连接。 但是，客户端连接不会自动重新连接。 假设启用了心跳，那么客户端通常会注意到代理在 10 秒内没有响应。 客户需要实现自己的重新连接逻辑。")],-1),C_=(0,l._)("h3",{id:"_4-4-17-拦截",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-17-拦截","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.17. 拦截")],-1),x_=(0,l._)("p",null,[(0,l._)("a",{href:"#_4-4-16-%E4%BA%8B%E4%BB%B6"},"事件"),(0,l.Uk)("提供有关 STOMP 连接生命周期的通知，但不提供每条客户端消息的通知。 应用程序还可以注册一个 "),(0,l._)("code",null,"ChannelInterceptor"),(0,l.Uk)(" 来拦截处理链中任何部分的任何消息。 以下示例展示了如何拦截来自客户端的入站消息：")],-1),J_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureClientInboundChannel(ChannelRegistration registration) {\n        registration.interceptors(new MyChannelInterceptor());\n    }\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br")])],-1),P_=(0,l._)("p",null,[(0,l.Uk)("自定义 "),(0,l._)("code",null,"ChannelInterceptor"),(0,l.Uk)(" 可以使用 "),(0,l._)("code",null,"StompHeaderAccessor"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"SimpMessageHeaderAccessor"),(0,l.Uk)(" 访问相关消息的信息，如以下示例所示：")],-1),H_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"public class MyChannelInterceptor implements ChannelInterceptor {\n\n    @Override\n    public Message<?> preSend(Message<?> message, MessageChannel channel) {\n        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);\n        StompCommand command = accessor.getStompCommand();\n        // ...\n        return message;\n    }\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br")])],-1),y_=(0,l._)("p",null,[(0,l.Uk)("应用程序还可以实现 "),(0,l._)("code",null,"ExecutorChannelInterceptor"),(0,l.Uk)("，它是 "),(0,l._)("code",null,"ChannelInterceptor"),(0,l.Uk)(" 的子接口，在处理消息的线程中具有回调。 对于发送到频道的每个消息，"),(0,l._)("code",null,"ChannelInterceptor"),(0,l.Uk)(" 都会被一次调用，但 "),(0,l._)("code",null,"ExecutorChannelInterceptor"),(0,l.Uk)(" 会在订阅来自该频道的消息的每个 "),(0,l._)("code",null,"MessageHandler"),(0,l.Uk)(" 的线程中都提供钩子。")],-1),E_=(0,l._)("p",null,[(0,l.Uk)("请注意，与前面所述的 "),(0,l._)("code",null,"SessionDisconnectEvent"),(0,l.Uk)(" 一样，DISCONNECT 消息可以来自客户端，也可以在 WebSocket 会话关闭时自动生成。 在某些情况下，对于每个会话，拦截器可能会多次拦截此消息。 组件对于多个断开连接事件应该是幂等的。")],-1),O_=(0,l._)("h3",{id:"_4-4-18-stomp-客户端",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-18-stomp-客户端","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.18. STOMP 客户端")],-1),B_=(0,l._)("p",null,"Spring 提供了 WebSocket 客户端与 TCP 客户端。",-1),A_=(0,l._)("p",null,[(0,l.Uk)("首先，可以创建并配置 "),(0,l._)("code",null,"WebSocketStompClient"),(0,l.Uk)("，如下面的示例所示：")],-1),L_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"WebSocketClient webSocketClient = new StandardWebSocketClient();\nWebSocketStompClient stompClient = new WebSocketStompClient(webSocketClient);\nstompClient.setMessageConverter(new StringMessageConverter());\nstompClient.setTaskScheduler(taskScheduler); // for heartbeats\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br")])],-1),R_=(0,l.Uk)("在前面的示例中，可以用 "),I_=(0,l._)("code",null,"SockJsClient",-1),j_=(0,l.Uk)(" 替换 "),X_=(0,l._)("code",null,"StandardWebSocketClient",-1),N_=(0,l.Uk)("，因为这也是 "),D_=(0,l._)("code",null,"WebSocketClient",-1),F_=(0,l.Uk)(" 的实现。 "),q_=(0,l._)("code",null,"SockJsClient",-1),G_=(0,l.Uk)(" 可以使用 WebSocket 传输或回退基于 HTTP 传输。 有关更多详细信息，请参见 "),V_={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-fallback-sockjs-client",target:"_blank",rel:"noopener noreferrer"},z_=(0,l.Uk)("SockJsClient"),Y_=(0,l.Uk)("。"),Q_=(0,l._)("p",null,"接下来，可以建立连接并为 STOMP 会话提供处理程序，如以下示例所示：",-1),K_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'String url = "ws://127.0.0.1:8080/endpoint";\nStompSessionHandler sessionHandler = new MyStompSessionHandler();\nstompClient.connect(url, sessionHandler);\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br")])],-1),Z_=(0,l._)("p",null,"当会话准备好使用时，将通知处理程序，如以下示例所示：",-1),$_=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"public class MyStompSessionHandler extends StompSessionHandlerAdapter {\n\n    @Override\n    public void afterConnected(StompSession session, StompHeaders connectedHeaders) {\n        // ...\n    }\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br")])],-1),eo=(0,l._)("p",null,[(0,l.Uk)("一旦建立会话，就可以发送任何有效负载，并使用配置的 "),(0,l._)("code",null,"MessageConverter"),(0,l.Uk)(" 对其进行序列化，如以下示例所示：")],-1),no=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'session.send("/topic/something", "payload");\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br")])],-1),so=(0,l._)("p",null,[(0,l.Uk)("还可以订阅目的地。 "),(0,l._)("code",null,"subscribe"),(0,l.Uk)(" 方法需要一个用于订阅中消息的处理程序，并返回可用于取消订阅的 "),(0,l._)("code",null,"Subscription"),(0,l.Uk)(" 句柄。 对于每个收到的消息，处理程序可以指定应将有效负载反序列化到的目标对象类型，如以下示例所示：")],-1),lo=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'session.subscribe("/topic/something", new StompFrameHandler() {\n\n    @Override\n    public Type getPayloadType(StompHeaders headers) {\n        return String.class;\n    }\n\n    @Override\n    public void handleFrame(StompHeaders headers, Object payload) {\n        // ...\n    }\n\n});\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br")])],-1),ro=(0,l._)("p",null,[(0,l.Uk)("要启用 STOMP 心跳，可以使用 "),(0,l._)("code",null,"TaskScheduler"),(0,l.Uk)(" 配置 "),(0,l._)("code",null,"WebSocketStompClient"),(0,l.Uk)(" 并有选择地自定义心跳间隔（10 秒未写发送心跳，10 秒未读关闭连接）。")],-1),ao=(0,l._)("p",null,[(0,l._)("code",null,"WebSocketStompClient"),(0,l.Uk)(" 仅在不活动的情况下（即未发送其他消息时）发送心跳。 使用外部代理时，这可能会带来挑战，因为带有非代理目的地的消息表示活动，但实际上不会转发到代理。 在这种情况下，可以在初始化"),(0,l._)("a",{href:"#_4-4-9-%E5%A4%96%E9%83%A8%E4%BB%A3%E7%90%86"},"外部代理"),(0,l.Uk)("时配置 "),(0,l._)("code",null,"TaskScheduler"),(0,l.Uk)("，以确保即使仅发送具有非代理目标的消息，也可以将心跳转发到代理。")],-1),co=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l.Uk)("当使用 "),(0,l._)("code",null,"WebSocketStompClient"),(0,l.Uk)(" 进行性能测试，以模拟同一台计算机上的数千个客户端时，请考虑关闭心跳，因为每个连接都计划自己的心跳任务，并且并未针对在同一台计算机上运行的大量客户端进行优化。")])],-1),io=(0,l._)("p",null,[(0,l.Uk)("STOMP 协议还支持收据，客户端必须在其中添加一个 "),(0,l._)("code",null,"receipt"),(0,l.Uk)(" 标头，在发送或订阅处理之后，服务器以 RECEIPT 帧作为响应标头。 为此，"),(0,l._)("code",null,"StompSession"),(0,l.Uk)(" 提供了 "),(0,l._)("code",null,"setAutoReceipt(boolean)"),(0,l.Uk)("，它会在每个后续发送或订阅事件上添加一个 "),(0,l._)("code",null,"receipt"),(0,l.Uk)(" 报头。 或者，也可以手动将收据标头添加到 "),(0,l._)("code",null,"StompHeaders"),(0,l.Uk)("。 发送与订阅都返回一个 "),(0,l._)("code",null,"Receiptable"),(0,l.Uk)(" 实例，可以使用该实例注册接收成功与失败的回调。 要使用此特性，必须为客户端配置 "),(0,l._)("code",null,"TaskScheduler"),(0,l.Uk)(" 以及收据过期之前的时间（默认为 15 秒）。")],-1),_o=(0,l._)("p",null,[(0,l.Uk)("请注意，"),(0,l._)("code",null,"StompSessionHandler"),(0,l.Uk)(" 本身是一个 "),(0,l._)("code",null,"StompFrameHandler"),(0,l.Uk)("，它除了处理来自消息处理的异常的 "),(0,l._)("code",null,"handleException"),(0,l.Uk)(" 回调与处理包括 "),(0,l._)("code",null,"ConnectionLostException"),(0,l.Uk)(" 的传输级错误的 "),(0,l._)("code",null,"handleTransportError"),(0,l.Uk)(" 之外，还可以处理 ERROR 帧。")],-1),oo=(0,l._)("h3",{id:"_4-4-19-websocket-作用域",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-19-websocket-作用域","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.19. WebSocket 作用域")],-1),to=(0,l._)("p",null,"每个 WebSocket 会话都有一个属性映射。 该映射作为标头附加到入站客户端消息，可以通过控制器方法进行访问，如以下示例所示：",-1),bo=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Controller\npublic class MyController {\n\n    @MessageMapping("/action")\n    public void handle(SimpMessageHeaderAccessor headerAccessor) {\n        Map<String, Object> attrs = headerAccessor.getSessionAttributes();\n        // ...\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br")])],-1),uo=(0,l._)("p",null,[(0,l.Uk)("可以在 "),(0,l._)("code",null,"websocket"),(0,l.Uk)(" 作用域内声明一个 Spring 托管的 Bean。 可以将 WebSocket 作用域的 Bean 注入控制器以及在 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 上注册的任何通道拦截器中。 这些都是典型的单例对象，并且比任何单独的 WebSocket 会话寿命更长。 因此，需要对作用域 WebSocket 的 Bean 使用作用域代理模式，如以下示例所示：")],-1),po=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,'@Component\n@Scope(scopeName = "websocket", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class MyBean {\n\n    @PostConstruct\n    public void init() {\n        // 注入依赖项后调用\n    }\n\n    // ...\n\n    @PreDestroy\n    public void destroy() {\n        // WebSocket 会话结束时调用\n    }\n}\n\n@Controller\npublic class MyController {\n\n    private final MyBean myBean;\n\n    @Autowired\n    public MyController(MyBean myBean) {\n        this.myBean = myBean;\n    }\n\n    @MessageMapping("/action")\n    public void handle() {\n        // 当前 WebSocket 会话中的 this.myBean\n    }\n}\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"16"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"17"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"18"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"19"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"20"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"21"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"22"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"23"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"24"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"25"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"26"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"27"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"28"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"29"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"30"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"31"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"32"),(0,l._)("br")])],-1),mo=(0,l._)("p",null,[(0,l.Uk)("与任何自定义范围一样，Spring 首次在控制器中对其进行访问时会初始化一个新的 "),(0,l._)("code",null,"MyBean"),(0,l.Uk)(" 实例，并将该实例存储在 WebSocket 会话属性中。 随后将返回相同的实例，直到会话结束。 WebSocket 作用域的 Bean 调用了所有 Spring 生命周期方法，如前面的示例所示。")],-1),ko=(0,l._)("h3",{id:"_4-4-20-性能",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-20-性能","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.20. 性能")],-1),go=(0,l._)("p",null,"关于性能，没有万灵药。 影响它的因素很多，包括消息的大小与数量，应用程序方法是否执行需要阻止的工作以及外部因素（例如网络速度与其他问题）。 本部分的目的是提供可用配置选项的概述，以及有关如何进行扩展的一些想法。",-1),ho=(0,l._)("p",null,[(0,l.Uk)("在消息传递应用程序中，消息通过频道传递以进行异步执行，并由线程池支持。 配置这样的应用程序需要对频道与消息流有充分的了解。 因此，建议查看"),(0,l._)("a",{href:"#_4-4-5-%E6%B6%88%E6%81%AF%E6%B5%81"},"消息流"),(0,l.Uk)("。")],-1),So=(0,l._)("p",null,[(0,l.Uk)("最明显的起点是配置支持 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)(" 的线程池。 默认情况下，两者都配置为可用处理器数量的两倍。")],-1),Uo=(0,l._)("p",null,[(0,l.Uk)("如果带注解的方法中的消息处理主要是受 CPU 限制的，那么 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 的线程数应保持接近处理器数。 如果它们所做的工作更多地受到 IO 限制，并且需要阻塞或等待数据库或其他外部系统，那么可能需要增加线程池大小。")],-1),wo=(0,l._)("div",{class:"custom-container tip"},[(0,l._)("p",{class:"custom-container-title"},"TIP"),(0,l._)("p",null,[(0,l._)("code",null,"ThreadPoolExecutor"),(0,l.Uk)(" 具有三个重要属性：核心线程池大小、最大线程池大小以及队列存储没有可用线程的任务的容量。")]),(0,l._)("p",null,"常见的混淆点是，配置核心池大小（例如 10）与最大池大小（例如 20）会导致线程池具有 10 到 20 个线程。 实际上，如果将容量保留为其默认值 Integer.MAX_VALUE，那么由于所有其他任务都已排队，因此线程池永远不会超过核心池的大小。"),(0,l._)("p",null,[(0,l.Uk)("请参阅 "),(0,l._)("code",null,"ThreadPoolExecutor"),(0,l.Uk)(" 的 JavaDoc，以了解这些属性如何工作并了解各种排队策略。")])],-1),vo=(0,l._)("p",null,[(0,l.Uk)("在 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)(" 方面，所有关于向 WebSocket 客户端发送消息。 如果客户端位于快速网络上，那么线程数应保持接近可用处理器数。 如果客户端很慢或带宽很低，那么将花费更长的时间来消耗消息并给线程池增加负担。 因此，必须增加线程池的大小。")],-1),fo=(0,l._)("p",null,[(0,l.Uk)("虽然 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 的工作量可以预测——毕竟，它是基于应用程序的工作——但是，如何配置“clientOutboundChannel”却比较困难，因为它基于应用程序无法控制的因素。 因此，还有两个与消息发送有关的属性："),(0,l._)("code",null,"sendTimeLimit"),(0,l.Uk)(" 与 "),(0,l._)("code",null,"sendBufferSizeLimit"),(0,l.Uk)("。 可以使用这些方法来配置发送消息到客户端时允许发送多长时间以及可以缓冲多少数据。")],-1),Mo=(0,l._)("p",null,"通常的想法是，在任何给定时间，只能使用单个线程将其发送给客户端。 同时，所有其他消息都将被缓冲，可以使用这些属性来决定允许发送消息花费多长时间以及在此期间可以缓冲多少数据。 有关其他重要信息，请参见 XML 模式的 JavaDoc 与文档。",-1),To=(0,l._)("p",null,"以下示例展示了可能的配置：",-1),Wo=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureWebSocketTransport(WebSocketTransportRegistration registration) {\n        registration.setSendTimeLimit(15 * 1000).setSendBufferSizeLimit(512 * 1024);\n    }\n\n    // ...\n\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br")])],-1),Co=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),xo=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:message-broker>\n        <websocket:transport send-timeout="15000" send-buffer-size="524288" />\n        \x3c!-- ... --\x3e\n    </websocket:message-broker>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br")])],-1),Jo=(0,l.Uk)("还可以使用前面显示的 WebSocket 传输配置来配置传入 STOMP 消息的最大允许大小。 从理论上讲，WebSocket 消息的大小几乎是无限的。 实际上，WebSocket 服务端会施加限制，例如：Tomcat 8K 与 Jetty 64K。 因此，STOMP 客户端（例如 JavaScript "),Po={href:"https://github.com/JSteunou/webstomp-client",target:"_blank",rel:"noopener noreferrer"},Ho=(0,l.Uk)("webstomp-client"),yo=(0,l.Uk)(" 等）在 16K 边界处拆分较大的 STOMP 消息，并将其作为多个 WebSocket 消息发送，这需要服务器进行缓冲与重新组装。"),Eo=(0,l._)("p",null,"Spring 的 STOMP-over-WebSocket 支持可以做到这一点，因此应用程序可以为 STOMP 消息配置最大大小，而与 WebSocket 服务器特定的消息大小无关。 请记住，如有必要，将自动调整 WebSocket 消息的大小，以确保它们最多可以承载 16K WebSocket 消息。",-1),Oo=(0,l._)("p",null,"以下示例展示了一种可能的配置：",-1),Bo=(0,l._)("div",{class:"language-Java ext-Java line-numbers-mode"},[(0,l._)("pre",{class:"language-Java"},[(0,l._)("code",null,"@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureWebSocketTransport(WebSocketTransportRegistration registration) {\n        registration.setMessageSizeLimit(128 * 1024);\n    }\n\n    // ...\n\n}\n")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br")])],-1),Ao=(0,l._)("p",null,"下面的示例展示与前面的示例等效的 XML 配置：",-1),Lo=(0,l._)("div",{class:"language-XML ext-XML line-numbers-mode"},[(0,l._)("pre",{class:"language-XML"},[(0,l._)("code",null,'<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xmlns:websocket="http://www.springframework.org/schema/websocket"\n    xsi:schemaLocation="\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/websocket\n        https://www.springframework.org/schema/websocket/spring-websocket.xsd">\n\n    <websocket:message-broker>\n        <websocket:transport message-size="131072" />\n        \x3c!-- ... --\x3e\n    </websocket:message-broker>\n\n</beans>\n')]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"11"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"12"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"13"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"14"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"15"),(0,l._)("br")])],-1),Ro=(0,l._)("p",null,"关于扩展的重要一点涉及使用多个应用程序实例。 当前，不能使用简单的代理来做到这一点。 但是，当使用全功能代理（例如 RabbitMQ）时，每个应用程序实例都连接到代理，并且从一个应用程序实例广播的消息可以通过代理广播到通过任何其他应用程序实例连接的 WebSocket 客户端。",-1),Io=(0,l._)("h3",{id:"_4-4-21-监控",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-21-监控","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.21. 监控")],-1),jo=(0,l._)("p",null,[(0,l.Uk)("当使用 "),(0,l._)("code",null,"@EnableWebSocketMessageBroker"),(0,l.Uk)(" 或 "),(0,l._)("code",null,"<websocket:message-broker>"),(0,l.Uk)(" 时，关键基础结构组件会自动收集统计信息与计数器，这些统计信息与计数器可提供对应用程序内部状态的重要了解。 该配置还声明了一个 "),(0,l._)("code",null,"WebSocketMessageBrokerStats"),(0,l.Uk)(" 类型的 Bean，该 Bean 将所有可用信息收集到一个位置，并且默认情况下每 30 分钟在 "),(0,l._)("code",null,"INFO"),(0,l.Uk)(" 级别记录一次。 该 Bean 可以通过 Spring 的 "),(0,l._)("code",null,"MBeanExporter"),(0,l.Uk)(" 导出到 JMX，以便在运行时查看（例如，通过 JDK 的 "),(0,l._)("code",null,"jconsole"),(0,l.Uk)("）。 以下列表总结了可用的信息：")],-1),Xo=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("strong",null,"Client WebSocket Sessions"),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("strong",null,"Current"),(0,l.Uk)(" 指示当前有多少个客户端会话，计数进一步分解为 WebSocket、HTTP 流与轮询 SockJS 会话。")]),(0,l._)("li",null,[(0,l._)("strong",null,"Total"),(0,l.Uk)(" 指示已建立的会话总数。")]),(0,l._)("li",null,[(0,l._)("strong",null,"Abnormally Closed"),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("strong",null,"Connect Failures"),(0,l.Uk)(" 已建立但在 60 秒内未收到任何消息后关闭的会话。 这通常表示代理或网络问题。")]),(0,l._)("li",null,[(0,l._)("strong",null,"Send Limit Exceeded"),(0,l.Uk)(" 超过配置的发送超时或发送缓冲区限制后，会话将关闭，缓慢的客户端可能会发生该会话（请参阅上一节）。")]),(0,l._)("li",null,[(0,l._)("strong",null,"Transport Errors"),(0,l.Uk)(" 传输错误（例如无法读取或写入 WebSocket 连接或 HTTP 请求或响应）后，会话关闭。")])])]),(0,l._)("li",null,[(0,l._)("strong",null,"STOMP Frames"),(0,l.Uk)(" 已处理的 CONNECT、CONNECTED 与 DISCONNECT 帧的总数，指示在 STOMP 级别上连接了多少个客户端。 请注意，当会话异常关闭或客户端未发送 DISCONNECT 帧而关闭时，DISCONNECT 计数可能会偏低。")])])]),(0,l._)("li",null,[(0,l._)("strong",null,"STOMP Broker Relay"),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("strong",null,"TCP Connections"),(0,l.Uk)(" 指示与代理建立了代表客户端 WebSocket 会话的 TCP 连接数。 这应该等于客户端 WebSocket 会话的数量 +1 个用于从应用程序内部发送消息的附加共享“系统”连接。")]),(0,l._)("li",null,[(0,l._)("strong",null,"STOMP Frames"),(0,l.Uk)(" 代表客户转发到代理或从代理接收的 CONNECT、CONNECTED 与 DISCONNECT 帧的总数。 请注意，无论客户端 WebSocket 会话如何关闭，DISCONNECT 帧都会发送到代理。 因此，偏低的 DISCONNECT 帧计数表示代理正在主动关闭连接（可能是由于未及时到达的心跳、无效的输入帧或其他问题）。")])])]),(0,l._)("li",null,[(0,l._)("strong",null,"Client Inbound Channel"),(0,l.Uk)(" 来自支持 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 的线程池的统计信息，可深入了解传入消息处理的运行状况。 此处排队的任务表明该应用程序可能太慢而无法处理消息。 如果存在 I/O 绑定的任务（例如：缓慢的数据库查询、对第三方 REST API 的 HTTP 请求等），请考虑增加线程池的大小。")]),(0,l._)("li",null,[(0,l._)("strong",null,"Client Outbound Channel"),(0,l.Uk)(" 来自支持 "),(0,l._)("code",null,"clientOutboundChannel"),(0,l.Uk)(" 的线程池的统计信息，该统计信息提供了对向客户端广播消息的运行状况的深入了解。 此处排队的任务表明客户端太慢而无法消费消息。 解决此问题的一种方法是增加线程池大小，以容纳并发慢速客户端的预期数量。 另一个选择是减少发送超时与发送缓冲区大小限制（请参阅上一节）。")]),(0,l._)("li",null,[(0,l._)("strong",null,"SockJS Task Scheduler"),(0,l.Uk)(" 来自 SockJS 任务调度程序的线程池的统计信息，用于发送心跳。 请注意，在 STOMP 级别协商心跳时，将禁用 SockJS 心跳。")])],-1),No=(0,l._)("h3",{id:"_4-4-22-测试",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-4-22-测试","aria-hidden":"true"},"#"),(0,l.Uk)(" 4.4.22. 测试")],-1),Do=(0,l._)("p",null,"当使用 Spring 的 STOMP-over-WebSocket 支持时，主要有两种方法来测试应用程序。 第一种是编写服务端测试，以验证控制器及其带注解的消息处理方法的功能性。 第二种是编写涉及运行客户端与服务端的完整的端到端测试。",-1),Fo=(0,l._)("p",null,"两种方法不是互斥的。 相反，每一种都在整体测试策略中占有一席之地。 服务端测试更加集中，更易于编写和维护。 另一方面，端到端集成测试，更完整并且测试更多，但也更涉及到编写与维护。",-1),qo=(0,l._)("p",null,"服务端测试的最简单形式是编写控制器单元测试。 但是，这还不够有用，因为控制器所做的很多事情都取决于其注释。 纯单元测试根本无法测试。",-1),Go=(0,l._)("p",null,"理想情况下，应该像在运行时那样调用被测控制器，就像使用 Spring MVC Test 框架测试处理 HTTP 请求的控制器的方法一样，即不运行 Servlet 容器而是依靠 Spring 框架来调用被测控制器。 带注解的控制器。 与 Spring MVC Test 一样，有两种可能的选择，要么使用“基于上下文的”设置，要么使用“独立的”设置：",-1),Vo=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("在 Spring TestContext 框架的帮助下加载实际的 Spring 配置，将 "),(0,l._)("code",null,"clientInboundChannel"),(0,l.Uk)(" 注入为测试字段，并使用它发送消息以由控制器方法处理。")])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("手动设置调用控制器（即 "),(0,l._)("code",null,"SimpAnnotationMethodMessageHandler"),(0,l.Uk)("）所需的最小 Spring 框架基础设施，并将控制器的消息直接传递给它。")])])],-1),zo=(0,l.Uk)("在 "),Yo={href:"https://github.com/rstoyanchev/spring-websocket-portfolio/tree/master/src/test/java/org/springframework/samples/portfolio/web",target:"_blank",rel:"noopener noreferrer"},Qo=(0,l.Uk)("tests for the stock portfolio"),Ko=(0,l.Uk)(" 示例应用中演示了这两种设置方案。"),Zo=(0,l.Uk)("第二种方法是创建端到端集成测试。 为此，需要以嵌入式模式运行 WebSocket 服务器，并将其作为 WebSocket 客户端连接到该服务器，该客户端发送包含 STOMP 帧的 WebSocket 消息。 在 "),$o={href:"https://github.com/rstoyanchev/spring-websocket-portfolio/tree/master/src/test/java/org/springframework/samples/portfolio/web",target:"_blank",rel:"noopener noreferrer"},et=(0,l.Uk)("tests for the stock portfolio"),nt=(0,l.Uk)(" 示例应用中，还通过将 Tomcat 用作嵌入式 WebSocket 服务器与用于测试目的的简单 STOMP 客户端来演示此方法。"),st={render:function(e,n){const s=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[c,(0,l._)("p",null,[(0,l._)("a",i,[_,(0,l.Wm)(s)])]),o,t,(0,l._)("p",null,[b,(0,l._)("a",u,[p,(0,l.Wm)(s)]),m]),k,d,g,h,S,U,w,v,f,M,T,W,C,x,J,P,H,y,E,O,B,(0,l._)("p",null,[(0,l._)("a",A,[L,(0,l.Wm)(s)])]),R,I,(0,l._)("p",null,[(0,l._)("a",j,[X,(0,l.Wm)(s)])]),N,D,F,q,G,V,(0,l._)("p",null,[z,(0,l._)("a",Y,[Q,(0,l.Wm)(s)]),K,(0,l._)("a",Z,[$,(0,l.Wm)(s)]),ee,ne,se]),le,(0,l._)("p",null,[(0,l._)("a",re,[ae,(0,l.Wm)(s)])]),ce,ie,_e,oe,te,be,ue,pe,me,ke,(0,l._)("div",de,[ge,(0,l._)("p",null,[he,(0,l._)("a",Se,[Ue,(0,l.Wm)(s)]),we])]),ve,fe,Me,Te,We,(0,l._)("p",null,[(0,l._)("a",Ce,[xe,(0,l.Wm)(s)])]),Je,Pe,He,ye,Ee,Oe,Be,Ae,Le,Re,Ie,(0,l._)("p",null,[(0,l._)("a",je,[Xe,(0,l.Wm)(s)])]),(0,l._)("p",null,[Ne,De,Fe,(0,l._)("a",qe,[Ge,(0,l.Wm)(s)]),Ve]),ze,Ye,Qe,Ke,Ze,$e,en,nn,sn,ln,rn,an,cn,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",_n,[on,(0,l.Wm)(s)]),tn,(0,l._)("a",bn,[un,(0,l.Wm)(s)]),pn])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",mn,[kn,(0,l.Wm)(s)]),dn])]),gn,hn]),(0,l._)("p",null,[Sn,(0,l._)("a",Un,[wn,(0,l.Wm)(s)]),vn,(0,l._)("a",fn,[Mn,(0,l.Wm)(s)]),Tn]),Wn,Cn,xn,Jn,Pn,Hn,yn,En,(0,l._)("p",null,[On,Bn,An,Ln,Rn,(0,l._)("a",In,[jn,(0,l.Wm)(s)]),Xn]),Nn,Dn,Fn,qn,Gn,(0,l._)("p",null,[Vn,(0,l._)("a",zn,[Yn,(0,l.Wm)(s)]),Qn,(0,l._)("a",Kn,[Zn,(0,l.Wm)(s)]),$n,es,ns]),(0,l._)("p",null,[ss,(0,l._)("a",ls,[rs,(0,l.Wm)(s)]),as,(0,l._)("a",cs,[is,(0,l.Wm)(s)]),_s]),os,ts,(0,l._)("p",null,[bs,(0,l._)("a",us,[ps,(0,l.Wm)(s)]),ms]),ks,(0,l._)("p",null,[ds,gs,hs,Ss,Us,ws,vs,fs,Ms,(0,l._)("a",Ts,[Ws,(0,l.Wm)(s)]),Cs]),(0,l._)("div",xs,[Js,Ps,(0,l._)("p",null,[Hs,ys,Es,(0,l._)("a",Os,[Bs,(0,l.Wm)(s)]),As,(0,l._)("a",Ls,[Rs,(0,l.Wm)(s)]),Is])]),js,Xs,Ns,Ds,(0,l._)("div",Fs,[qs,(0,l._)("p",null,[Gs,(0,l._)("a",Vs,[zs,(0,l.Wm)(s)]),Ys])]),Qs,(0,l._)("p",null,[Ks,Zs,$s,(0,l._)("a",el,[nl,(0,l.Wm)(s)]),sl]),ll,rl,al,(0,l._)("p",null,[cl,(0,l._)("a",il,[_l,(0,l.Wm)(s)]),ol]),tl,(0,l._)("p",null,[bl,(0,l._)("a",ul,[pl,(0,l.Wm)(s)]),ml]),kl,dl,gl,hl,Sl,Ul,wl,vl,fl,Ml,Tl,Wl,Cl,xl,Jl,Pl,Hl,yl,El,Ol,Bl,Al,Ll,Rl,Il,jl,(0,l._)("p",null,[(0,l._)("a",Xl,[Nl,(0,l.Wm)(s)]),Dl]),Fl,ql,Gl,Vl,zl,Yl,Ql,Kl,Zl,$l,er,nr,sr,(0,l._)("p",null,[lr,(0,l._)("a",rr,[ar,(0,l.Wm)(s)]),cr]),ir,_r,(0,l._)("ul",null,[or,(0,l._)("li",null,[(0,l._)("p",null,[tr,(0,l._)("a",br,[ur,(0,l.Wm)(s)]),pr])]),mr,kr,dr]),gr,hr,Sr,Ur,wr,vr,fr,(0,l._)("p",null,[Mr,(0,l._)("a",Tr,[Wr,(0,l.Wm)(s)]),Cr,(0,l._)("a",xr,[Jr,(0,l.Wm)(s)]),Pr,(0,l._)("a",Hr,[yr,(0,l.Wm)(s)]),Er]),Or,Br,Ar,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",Lr,[Rr,(0,l.Wm)(s)]),Ir])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",jr,[Xr,(0,l.Wm)(s)]),Nr])])]),Dr,Fr,qr,Gr,Vr,(0,l._)("p",null,[zr,Yr,(0,l._)("a",Qr,[Kr,(0,l.Wm)(s)]),Zr]),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",$r,[ea,(0,l.Wm)(s)]),na])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",sa,[la,(0,l.Wm)(s)]),ra])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",aa,[ca,(0,l.Wm)(s)]),ia])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",_a,[oa,(0,l.Wm)(s)]),ta,ba,ua,pa,ma])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",ka,[da,(0,l.Wm)(s)]),ga,ha,Sa,Ua,wa])])]),va,fa,Ma,Ta,Wa,Ca,xa,Ja,Pa,Ha,ya,Ea,(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("p",null,[Oa,(0,l._)("a",Ba,[Aa,(0,l.Wm)(s)]),La])]),Ra]),Ia,ja,Xa,Na,Da,Fa,qa,Ga,Va,za,Ya,Qa,Ka,Za,$a,ec,nc,sc,lc,rc,ac,cc,ic,_c,oc,tc,(0,l._)("p",null,[bc,uc,pc,mc,kc,dc,gc,(0,l._)("a",hc,[Sc,(0,l.Wm)(s)]),Uc]),wc,vc,fc,Mc,Tc,Wc,Cc,xc,Jc,Pc,Hc,(0,l._)("p",null,[yc,(0,l._)("a",Ec,[Oc,(0,l.Wm)(s)]),Bc,(0,l._)("a",Ac,[Lc,(0,l.Wm)(s)]),Rc]),Ic,jc,Xc,Nc,(0,l._)("p",null,[Dc,(0,l._)("a",Fc,[qc,(0,l.Wm)(s)]),Gc]),Vc,zc,Yc,Qc,Kc,Zc,$c,ei,ni,si,li,ri,ai,ci,ii,_i,oi,ti,bi,ui,pi,mi,ki,di,gi,hi,Si,Ui,(0,l._)("div",wi,[vi,(0,l._)("p",null,[fi,(0,l._)("a",Mi,[Ti,(0,l.Wm)(s)]),Wi,Ci,xi,(0,l._)("a",Ji,[Pi,(0,l.Wm)(s)]),Hi])]),yi,(0,l._)("p",null,[(0,l._)("a",Ei,[Oi,(0,l.Wm)(s)]),Bi]),Ai,(0,l._)("p",null,[(0,l._)("a",Li,[Ri,(0,l.Wm)(s)]),Ii,(0,l._)("a",ji,[Xi,(0,l.Wm)(s)]),Ni]),Di,Fi,qi,Gi,Vi,zi,Yi,Qi,Ki,Zi,$i,e_,n_,s_,l_,r_,(0,l._)("div",a_,[c_,(0,l._)("p",null,[i_,__,o_,t_,b_,(0,l._)("a",u_,[p_,(0,l.Wm)(s)]),m_])]),k_,d_,g_,h_,S_,U_,w_,v_,f_,M_,T_,W_,C_,x_,J_,P_,H_,y_,E_,O_,B_,A_,L_,(0,l._)("p",null,[R_,I_,j_,X_,N_,D_,F_,q_,G_,(0,l._)("a",V_,[z_,(0,l.Wm)(s)]),Y_]),Q_,K_,Z_,$_,eo,no,so,lo,ro,ao,co,io,_o,oo,to,bo,uo,po,mo,ko,go,ho,So,Uo,wo,vo,fo,Mo,To,Wo,Co,xo,(0,l._)("p",null,[Jo,(0,l._)("a",Po,[Ho,(0,l.Wm)(s)]),yo]),Eo,Oo,Bo,Ao,Lo,Ro,Io,jo,Xo,No,Do,Fo,qo,Go,Vo,(0,l._)("p",null,[zo,(0,l._)("a",Yo,[Qo,(0,l.Wm)(s)]),Ko]),(0,l._)("p",null,[Zo,(0,l._)("a",$o,[et,(0,l.Wm)(s)]),nt])],64)}}},9060:(e,n,s)=>{e.exports=s.p+"assets/img/message-flow-broker-relay.bcedf92f.png"},2484:(e,n,s)=>{e.exports=s.p+"assets/img/message-flow-simple-broker.ca7a169c.png"}}]);